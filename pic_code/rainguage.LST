CCS PCM C Compiler, Version 3.203, 16465

               Filename: rainguage.LST

               ROM used: 3654 words (45%)
                         Largest free fragment is 2048
               RAM used: 32 (18%) at main() level
                         100 (57%) worst case
               Stack:    3 locations

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   457
0003:  NOP
....................  #include <16F877A.h> 
....................  //////// Standard Header file for the PIC16F877A device ////////////////  
.................... #device PIC16F877A  
.................... #list  
....................  
.................... #device ADC=10 //for 10 bit resolution  
.................... #fuses HS,NOWDT,PUT,NOPROTECT,NOLVP  
.................... #include "pic.h" 
....................  #use delay(clock=4000000)  
.................... #fuses XT,NOWDT,BROWNOUT,PUT,NOLVP  
....................   
.................... #byte tmr0    =0x01  
.................... #byte pcl     =0x02  
.................... #byte status  =0x03  
.................... #byte porta   =0x05  
.................... 	#bit ra0  =0x05.0  
.................... 	#bit ra1  =0x05.1  
.................... 	#bit ra2  =0x05.2  
.................... 	#bit ra3  =0x05.3  
.................... 	#bit ra4  =0x05.4  
.................... 	#bit ra5  =0x05.5  
....................   
.................... #byte portb   =0x06  
.................... 	#bit rb0  =0x06.0  
.................... 	#bit rb1  =0x06.1  
.................... 	#bit rb2  =0x06.2  
.................... 	#bit rb3  =0x06.3  
.................... 	#bit rb4  =0x06.4  
.................... 	#bit rb5  =0x06.5  
.................... 	#bit rb6  =0x06.6  
.................... 	#bit rb7  =0x06.7  
....................   
.................... #byte portc   =0x07  
.................... 	#bit rc0  =0x07.0  
.................... 	#bit rc1  =0x07.1  
.................... 	#bit rc2  =0x07.2  
.................... 	#bit rc3  =0x07.3  
.................... 	#bit rc4  =0x07.4  
.................... 	#bit rc5  =0x07.5  
.................... 	#bit rc6  =0x07.6  
.................... 	#bit rc7  =0x07.7  
....................   
.................... #byte portd   =0x08  
.................... 	#bit rd0  =0x08.0  
.................... 	#bit rd1  =0x08.1  
.................... 	#bit rd2  =0x08.2  
.................... 	#bit rd3  =0x08.3  
.................... 	#bit rd4  =0x08.4  
.................... 	#bit rd5  =0x08.5  
.................... 	#bit rd6  =0x08.6  
.................... 	#bit rd7  =0x08.7  
....................   
.................... #byte porte   =0x09  
.................... 	#bit re0  =0x09.0  
.................... 	#bit re1  =0x09.1  
.................... 	#bit re2  =0x09.2  
....................   
.................... #byte pclath  =0x0a  
.................... #byte intcon  =0x0b  
.................... 	// bits of intcon  
.................... 	#bit rbif   = 0x0b.0  
.................... 	#bit intf   = 0x0b.1  
.................... 	#bit t0if   = 0x0b.2  
.................... 	#bit rbie   = 0x0b.3  
.................... 	#bit inte   = 0x0b.4  
.................... 	#bit t0ie   = 0x0b.5  
.................... 	#bit peie   = 0x0b.6  
.................... 	#bit gie    = 0x0b.7  
....................   
.................... #byte pir1    =0x0c  
.................... #byte pir2    =0x0d  
.................... #byte tmr1l   =0x0e  
.................... #byte tmr1h   =0x0f  
.................... #byte t1con   =0x10  
.................... #byte tmr2    =0x11  
.................... #byte t2con   =0x12  
.................... #byte sspbuf  =0x13  
.................... #byte sspcon  =0x14  
.................... #byte ccpr1l  =0x15  
.................... #byte ccpr1h  =0x16  
.................... #byte ccp1con =0x17  
.................... #byte rcsta   =0x18  
.................... #byte txreg	  =0x19  
.................... #byte rcreg	  =0x1a  
.................... #byte ccpr2l  =0x1b  
.................... #byte ccpr2h  =0x1c  
.................... #byte ccp2con =0x1d  
.................... #byte adresh  =0x1e  
.................... #byte adcon0  =0x1f  
.................... #bit adgo	 =0x1f.2  
....................   
.................... #byte option_reg =0x81  
.................... 	// bits of optiopn reg  
.................... 	#bit ps0    =0x81.0  
.................... 	#bit ps1    =0x81.1  
.................... 	#bit ps2    =0x81.2  
.................... 	#bit psa    =0x81.3  
.................... 	#bit t0se   =0x81.4  
.................... 	#bit t0cs   =0x81.5  
.................... 	#bit intedg =0x81.6  
.................... 	#bit rbpu   =0x81.7  
....................   
.................... #byte trisa  =0x85  
....................     #bit trisa0	=0x85.0  
....................     #bit trisa1	=0x85.1  
....................     #bit trisa2	=0x85.2  
....................     #bit trisa3	=0x85.3  
....................     #bit trisa4	=0x85.4  
....................     #bit trisa5	=0x85.5  
....................     #bit trisa6	=0x85.6  
....................     #bit trisa7	=0x85.7  
....................       
.................... #byte trisb  =0x86      
.................... 	#bit trisb0	=0x86.0  
.................... 	#bit trisb1	=0x86.1  
.................... 	#bit trisb2	=0x86.2  
.................... 	#bit trisb3	=0x86.3  
.................... 	#bit trisb4	=0x86.4  
.................... 	#bit trisb5	=0x86.5  
.................... 	#bit trisb6	=0x86.6  
.................... 	#bit trisb7	=0x86.7  
....................   
.................... #byte trisc  =0x87  
.................... 	#bit trisc0	=0x87.0  
.................... 	#bit trisc1	=0x87.1  
.................... 	#bit trisc2	=0x87.2  
.................... 	#bit trisc3	=0x87.3  
.................... 	#bit trisc4	=0x87.4  
.................... 	#bit trisc5	=0x87.5  
.................... 	#bit trisc6	=0x87.6  
.................... 	#bit trisc7	=0x87.7  
.................... #byte trisd  =0x88  
.................... #byte trise  =0x89  
.................... #byte pie1    =0x8c  
.................... #byte pie2    =0x8d  
.................... #byte pcon	  =0x8e  
.................... #byte sspcon2 =0x91  
....................  #bit SEN     = 0x91.0  
....................  #bit RSEN    = 0x91.1  
....................  #bit PEN     = 0x91.2  
....................  #bit RCEN    = 0x91.3  
....................  #bit ACKEN   = 0x91.4  
....................  #bit ACKDT   = 0x91.5  
....................  #bit ACKSTAT = 0x91.6  
....................  #bit GCEN     = 0x91.7  
.................... #byte pr2     =0x92  
.................... #byte sspadd  =0x93  
.................... #byte sspstat =0x94  
....................  #bit BF   = 0x94.0  
.................... #byte txsta   =0x98  
.................... #byte spbrg   =0x99  
.................... #byte cmcon   =0x9c  
.................... #byte cvrcon  =0x9d  
.................... #byte adresl  =0x9e  
.................... #byte adcon1  =0x9f  
....................   
....................   
.................... #byte eedata  =0x10c  
.................... #byte eeadr   =0x10d  
.................... #byte eedath  =0x10e  
.................... #byte eeadrh  =0x10f  
....................   
....................   
.................... #byte eecon1  =0x18c  
.................... #byte eecon2  =0x18d  
....................   
....................  
.................... #use delay(clock=20000000)  
*
0046:  MOVLW  3A
0047:  MOVWF  04
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   058
004B:  MOVLW  06
004C:  MOVWF  78
004D:  CLRF   77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   04D
0052:  MOVLW  7B
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  DECFSZ 00,F
0057:  GOTO   04B
0058:  RETLW  00
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7,bits=8,errors)  
*
0C6A:  CLRF   20
.................... #use I2C(master, sda=PIN_C4, scl=PIN_C3)  
0C6B:  MOVLW  FF
0C6C:  MOVWF  21
.................... #include "lcd_R.h" 
....................  /*LCD HEDDER 4 bit   
.................... CAUTION : Use pic.h hedder  
.................... 		   : You have to configure output status of used pins from TRIS register  
.................... 		   : Don't use location 0x20 it is used here for inner calculations   
.................... 		   :Don't use d0,d1,d2,d3,RS,E,selfscroll names in the program  
.................... Define the bits d0 to d3 ,RS, E and use the functions   
....................   
.................... R is not used and it should be grounded  
.................... */  
.................... #define 	d3	rb0//rb7	  
.................... #define 	d2	rb1//rb6  
.................... #define 	d1	rb2//rb5  
.................... #define 	d0	rb3//rb4  
.................... #define RS	rb7//rb3  
.................... #define E	rb6//rb2  
.................... #define selfscroll		// for strings > 16 char "selfscroll" or "newline"   
.................... /*Functions avialable  
.................... For printing strings directly use printc("String"); insted of prints  
.................... //lcdinit();  -> initialises LCD to 2 row 5x7 cursor off right side mode  
.................... go(location)	-> goto specified address from 0.  64 is second line starting address  
.................... clrscr();		-> clear LCD screen  
.................... print(no) -> displays Nos in dec upto 999999.999 only  
.................... printc(char)	-> displays an ASCII char  
.................... prints(char*)	-> Base address of char array  
.................... scroll(char*,delay)		scroll a message with delay*10 ms  
.................... wave(char*,delay)		wave a message with delay*10 ms  
.................... command(no) -> no	Cursor	Blink  
.................... 			NO=000011CB					1 for ON  & 0 for off  
.................... enb()		-> Give a high to low pulse in E pin  
.................... outc(no)		-> output nibble to dataline and call an enb()  
.................... */  
....................   
.................... #byte in =0x20  
.................... #bit g0 =0x20.0  
.................... #bit g1 =0x20.1  
.................... #bit g2 =0x20.2  
.................... #bit g3 =0x20.3   
.................... #bit g4 =0x20.4  
.................... #bit g5 =0x20.5  
.................... #bit g6 =0x20.6  
.................... #bit g7 =0x20.7  
....................   
.................... void enb(void)  
.................... {  
.................... 	E=1;  
*
0070:  BSF    06.6
.................... 	delay_us(1);  
0071:  NOP
0072:  NOP
0073:  NOP
0074:  NOP
0075:  NOP
.................... 	E=0;  
0076:  BCF    06.6
.................... }//  
.................... void outc(int a)  
.................... {	in=a;  
*
0059:  MOVF   3E,W
005A:  MOVWF  20
.................... 	d3=g3;  
005B:  BTFSS  20.3
005C:  BCF    06.0
005D:  BTFSC  20.3
005E:  BSF    06.0
.................... 	d2=g2;  
005F:  BTFSS  20.2
0060:  BCF    06.1
0061:  BTFSC  20.2
0062:  BSF    06.1
.................... 	d1=g1;  
0063:  BTFSS  20.1
0064:  BCF    06.2
0065:  BTFSC  20.1
0066:  BSF    06.2
.................... 	d0=g0;  
0067:  BTFSS  20.0
0068:  BCF    06.3
0069:  BTFSC  20.0
006A:  BSF    06.3
.................... 	delay_us(1);  
006B:  NOP
006C:  NOP
006D:  NOP
006E:  NOP
006F:  NOP
.................... 	enb();  
.................... }//  
*
0077:  RETLW  00
....................   
.................... lcdinit()    
.................... {       
.................... 	  
.................... 	delay_ms(2);	//wait time  
0078:  MOVLW  02
0079:  MOVWF  3A
007A:  CALL   046
.................... 		  
.................... 	RS=0;  
007B:  BCF    06.7
.................... 	outc(3);  
007C:  MOVLW  03
007D:  MOVWF  3E
007E:  CALL   059
.................... 	delay_ms(5);    
007F:  MOVLW  05
0080:  MOVWF  3A
0081:  CALL   046
.................... 	outc(3);  
0082:  MOVLW  03
0083:  MOVWF  3E
0084:  CALL   059
.................... 	delay_us(50);  
0085:  MOVLW  53
0086:  MOVWF  77
0087:  DECFSZ 77,F
0088:  GOTO   087
.................... 	outc(2);  
0089:  MOVLW  02
008A:  MOVWF  3E
008B:  CALL   059
.................... 	delay_us(50);  
008C:  MOVLW  53
008D:  MOVWF  77
008E:  DECFSZ 77,F
008F:  GOTO   08E
.................... 	outc(2);  
0090:  MOVLW  02
0091:  MOVWF  3E
0092:  CALL   059
.................... 	delay_us(50);  
0093:  MOVLW  53
0094:  MOVWF  77
0095:  DECFSZ 77,F
0096:  GOTO   095
.................... 	outc(8);  
0097:  MOVLW  08
0098:  MOVWF  3E
0099:  CALL   059
.................... 	delay_us(50);	    
009A:  MOVLW  53
009B:  MOVWF  77
009C:  DECFSZ 77,F
009D:  GOTO   09C
....................       
....................      outc(1);	//CURSOR MODE,RIGHT SH  
009E:  MOVLW  01
009F:  MOVWF  3E
00A0:  CALL   059
....................      delay_us(50);  
00A1:  MOVLW  53
00A2:  MOVWF  77
00A3:  DECFSZ 77,F
00A4:  GOTO   0A3
....................      outc(4);  
00A5:  MOVLW  04
00A6:  MOVWF  3E
00A7:  CALL   059
....................      delay_us(50);  
00A8:  MOVLW  53
00A9:  MOVWF  77
00AA:  DECFSZ 77,F
00AB:  GOTO   0AA
....................      outc(0);	//SCREEN,CUR-Off,  
00AC:  CLRF   3E
00AD:  CALL   059
....................      delay_us(50);  
00AE:  MOVLW  53
00AF:  MOVWF  77
00B0:  DECFSZ 77,F
00B1:  GOTO   0B0
....................      outc(0xC);  
00B2:  MOVLW  0C
00B3:  MOVWF  3E
00B4:  CALL   059
....................      delay_us(10);  
00B5:  MOVLW  10
00B6:  MOVWF  77
00B7:  DECFSZ 77,F
00B8:  GOTO   0B7
00B9:  NOP
....................      delay_us(50);	  
00BA:  MOVLW  53
00BB:  MOVWF  77
00BC:  DECFSZ 77,F
00BD:  GOTO   0BC
....................      outc(0);	//CUR RIGHT SHIFT  
00BE:  CLRF   3E
00BF:  CALL   059
....................      delay_us(50);  
00C0:  MOVLW  53
00C1:  MOVWF  77
00C2:  DECFSZ 77,F
00C3:  GOTO   0C2
....................      outc(6);  
00C4:  MOVLW  06
00C5:  MOVWF  3E
00C6:  CALL   059
....................      delay_us(50);  
00C7:  MOVLW  53
00C8:  MOVWF  77
00C9:  DECFSZ 77,F
00CA:  GOTO   0C9
....................     outc(0);	//CLE LCD &MEM HM CUR  
00CB:  CLRF   3E
00CC:  CALL   059
....................     delay_us(50);  
00CD:  MOVLW  53
00CE:  MOVWF  77
00CF:  DECFSZ 77,F
00D0:  GOTO   0CF
....................     outc(1);  
00D1:  MOVLW  01
00D2:  MOVWF  3E
00D3:  CALL   059
....................     delay_ms(2);  
00D4:  MOVLW  02
00D5:  MOVWF  3A
00D6:  CALL   046
....................  //   printf("Init over");  
....................      RS=1;  
00D7:  BSF    06.7
....................      
.................... }//  
00D8:  BSF    0A.3
00D9:  BCF    0A.4
00DA:  GOTO   47A (RETURN)
....................   
.................... void printc(char a)  
.................... {	  
.................... 	outc (a>>4);  
00DB:  SWAPF  3C,W
00DC:  MOVWF  3D
00DD:  MOVLW  0F
00DE:  ANDWF  3D,F
00DF:  MOVF   3D,W
00E0:  MOVWF  3E
00E1:  CALL   059
.................... 	delay_us(50);  
00E2:  MOVLW  53
00E3:  MOVWF  77
00E4:  DECFSZ 77,F
00E5:  GOTO   0E4
.................... 	outc (a);  
00E6:  MOVF   3C,W
00E7:  MOVWF  3E
00E8:  CALL   059
.................... 	delay_us(50);  
00E9:  MOVLW  53
00EA:  MOVWF  77
00EB:  DECFSZ 77,F
00EC:  GOTO   0EB
.................... }	//  
00ED:  RETLW  00
....................   
.................... void command(int dat)  
.................... {	  
.................... 	RS=0;  
.................... 	printc(dat);  
.................... 	RS=1;  
.................... }	  
....................   
.................... void go(int p)  
.................... {	//p=p|0x80;  
.................... 	RS=0;  
00EE:  BCF    06.7
.................... 	printc(p | 0x80);  
00EF:  MOVF   3A,W
00F0:  IORLW  80
00F1:  MOVWF  3B
00F2:  MOVWF  3C
00F3:  CALL   0DB
.................... 	RS=1;  
00F4:  BSF    06.7
.................... }//  
00F5:  BSF    0A.3
00F6:  BCF    0A.4
00F7:  GOTO   47E (RETURN)
....................   
....................   
.................... print(float q)  
.................... {	  
.................... 	float p ;  
.................... 	int i=0,j=0,k=0,l=0,m=0,n=0,x;  
.................... 	i =q/100000;  
.................... 	if(i)  
.................... 	{  
.................... 	printc (i+0x30);  
.................... 	}  
.................... 	p=i;  
.................... 	q = q - p*100000;  
.................... 	j=q/10000;  
.................... 	if(i || j)  
.................... 	{  
.................... 	printc(j+0x30);  
.................... 	}  
.................... 	p=j;  
.................... 	q = q - p*10000;  
.................... 	k=q/1000;  
.................... 	if(i || j || k)  
.................... 	{printc(k+0x30);}  
.................... 	p=k;  
.................... 	q = q - p*1000;   
.................... 	  
.................... 	l=q / 100;  
.................... 	if( i || j || k || l )  
.................... 	{printc(l+0x30);}  
.................... 	p=l;  
.................... 	q = q - p *100;  
....................   
.................... 	m=q/10;  
.................... 	if(i || j || k || l || m)  
.................... 	{printc (m+0x30);}  
.................... 	q = q - m*10;  
.................... 	n=q;  
.................... 	printc(n+0x30);  
.................... 	q = q -n;   
....................   
.................... 	q=q*1000;					//Aftrer Decimel	  
.................... 	l=q / 100;  
.................... 	p=l;  
.................... 	q = q - p *100;  
.................... 	m=q/10;  
.................... 	q = q - m*10;  
.................... 	n=q;  
.................... 	if(n || m || l)  
.................... 	{  
.................... 	printc('.');  
.................... 	printc(l+0x30);  
.................... 	}  
.................... 	if(n || m)  
.................... 	{  
.................... 	printc(m+0x30);  
.................... 	}  
.................... 	if(n)  
.................... 	{  
.................... 	printc(n+0x30>>4);  
.................... 	}  
.................... 	  
.................... }//	  
....................   
.................... 	prints(char *c)  
.................... {	int k=0;  
.................... 	while(*c!='\0')  
.................... 	{  
.................... 	//printf("%c",*c);  
.................... 	printc(*c);  
.................... 	c++;  
.................... 	#ifdef selfscroll  
.................... 	k++;  
.................... 	if(k>15)  
.................... 	{  
.................... 	delay_ms(200);  
.................... 	command(0x18);  
.................... 	}  
.................... 	#endif  
.................... 	#ifdef newline  
.................... 	k++;  
.................... 	if(k==16 || k==48)  
.................... 	go(64);  
.................... 	if(k==32 || k== 64)  
.................... 	go(0);  
.................... 	#endif  
.................... 	}  
.................... }//  
....................   
.................... clrscr()  
.................... {	  
.................... 	RS=0;  
.................... 	outc(0);	//CLE LCD &MEM HM CUR  
....................     	delay_us(50);  
....................     	outc(1);  
....................     	delay_ms(2);  
.................... 	RS=1;  
.................... }//  
....................   
.................... scroll(char *c,long int d)  
.................... {  
.................... 	int i=15;  
....................  for(i=15;i>0;i--)  
.................... 	{  
.................... 	go(i);  
.................... 	prints(c);  
.................... 	delay_ms(10*d);  
.................... 	clrscr();  
.................... 	}  
.................... 	while(*c!='\0')  
.................... 	{  
.................... 	go(0);  
.................... 	prints(c);  
.................... 	c++;  
.................... 	delay_ms(10*d);  
.................... 	clrscr();  
.................... 	}  
.................... }//  
....................   
.................... wave(char *c,long int d)  
.................... {	char *t;  
.................... 	int i=15,k=0;  
.................... 	t=c;  
.................... 	while(*t!='\0')  
.................... 	{k++;t++;}  
....................  for(i=16-k;i>=0;i--)  
.................... 	{  
.................... 	go(i);  
.................... 	prints(c);  
.................... 	delay_ms(10*d);  
.................... 	clrscr();  
.................... 	if(i==0)  
.................... 	break;  
.................... 	}  
.................... 	for(i=0;i<17-k;i++)  
.................... 	{  
.................... 	go(i);  
.................... 	prints(c);  
.................... 	delay_ms(10*d);  
.................... 	clrscr();  
.................... 	}//  
.................... 	  
.................... }//  
....................  
.................... #include "sht11.c" 
....................  ///////////////////////////////////////////////////////////////////////////////  
.................... //                                                                           //  
.................... // Driver file for SHT75 Temperature & Humidity Sensor                       //  
.................... //                                                                           //  
.................... // ***** To initialise SHT75 sensor upon power up *****                      //  
.................... //                                                                           //  
.................... // Function : sht_init()                                                     //  
.................... // Return   : none                                                           //  
.................... //                                                                           //  
.................... //                                                                           //  
.................... // ***** To measure and caluculate SHT75 temp & real RH *****                //  
.................... //                                                                           //  
.................... // Function : sht_rd (temp, truehumid)                                       //  
.................... // Return   : temperature & true humidity in float values                    //  
.................... //                                                                           //  
.................... ///////////////////////////////////////////////////////////////////////////////  
....................   
.................... #define sht_data_pin   PIN_C4  
.................... #define sht_clk_pin    PIN_C3  
....................   
....................   
.................... //***** Function to alert SHT75 *****  
....................   
.................... void comstart (void)  
.................... {  
....................  output_float(sht_data_pin);  //data high  
00F8:  BSF    03.5
00F9:  BSF    07.4
....................  output_bit(sht_clk_pin, 0);  //clk low  
00FA:  BCF    03.5
00FB:  BCF    07.3
00FC:  BCF    21.3
00FD:  MOVF   21,W
00FE:  BSF    03.5
00FF:  MOVWF  07
....................  delay_us(1);  
0100:  NOP
0101:  NOP
0102:  NOP
0103:  NOP
0104:  NOP
....................  output_bit(sht_clk_pin, 1);  //clk high  
0105:  BCF    03.5
0106:  BSF    07.3
0107:  BCF    21.3
0108:  MOVF   21,W
0109:  BSF    03.5
010A:  MOVWF  07
....................  delay_us(1);  
010B:  NOP
010C:  NOP
010D:  NOP
010E:  NOP
010F:  NOP
....................  output_bit(sht_data_pin, 0); //data low  
0110:  BCF    03.5
0111:  BCF    07.4
0112:  BCF    21.4
0113:  MOVF   21,W
0114:  BSF    03.5
0115:  MOVWF  07
....................  delay_us(1);  
0116:  NOP
0117:  NOP
0118:  NOP
0119:  NOP
011A:  NOP
....................  output_bit(sht_clk_pin, 0);  //clk low  
011B:  BCF    03.5
011C:  BCF    07.3
011D:  BCF    21.3
011E:  MOVF   21,W
011F:  BSF    03.5
0120:  MOVWF  07
....................  delay_us(2);  
0121:  MOVLW  03
0122:  MOVWF  77
0123:  DECFSZ 77,F
0124:  GOTO   123
....................  output_bit(sht_clk_pin, 1);  //clk high  
0125:  BCF    03.5
0126:  BSF    07.3
0127:  BCF    21.3
0128:  MOVF   21,W
0129:  BSF    03.5
012A:  MOVWF  07
....................  delay_us(1);  
012B:  NOP
012C:  NOP
012D:  NOP
012E:  NOP
012F:  NOP
....................  output_float(sht_data_pin);  //data high  
0130:  BSF    07.4
....................  delay_us(1);  
0131:  NOP
0132:  NOP
0133:  NOP
0134:  NOP
0135:  NOP
....................  output_bit(sht_clk_pin, 0);  //clk low  
0136:  BCF    03.5
0137:  BCF    07.3
0138:  BCF    21.3
0139:  MOVF   21,W
013A:  BSF    03.5
013B:  MOVWF  07
.................... }  
013C:  BCF    03.5
013D:  RETLW  00
....................   
....................   
.................... //***** Function to write data to SHT75 *****  
....................   
.................... int1 comwrite (int8 iobyte)  
.................... {  
....................  int8 i, mask = 0x80;  
*
0683:  MOVLW  80
0684:  MOVWF  4F
....................  int1 ack;  
....................   
....................  //Shift out command  
....................  delay_us(4);  
0685:  MOVLW  06
0686:  MOVWF  77
0687:  DECFSZ 77,F
0688:  GOTO   687
0689:  NOP
....................  for(i=0; i<8; i++)  
068A:  CLRF   4E
068B:  MOVF   4E,W
068C:  SUBLW  07
068D:  BTFSS  03.0
068E:  GOTO   6B8
....................   {  
....................    output_bit(sht_clk_pin, 0);                          //clk low  
068F:  BCF    07.3
0690:  BCF    21.3
0691:  MOVF   21,W
0692:  BSF    03.5
0693:  MOVWF  07
....................    if((iobyte & mask) > 0) output_float(sht_data_pin);  //data high if MSB high  
0694:  BCF    03.5
0695:  MOVF   4D,W
0696:  ANDWF  4F,W
0697:  XORLW  00
0698:  BTFSC  03.2
0699:  GOTO   69E
069A:  BSF    03.5
069B:  BSF    07.4
....................    else output_bit(sht_data_pin, 0);                    //data low if MSB low  
069C:  GOTO   6A3
069D:  BCF    03.5
069E:  BCF    07.4
069F:  BCF    21.4
06A0:  MOVF   21,W
06A1:  BSF    03.5
06A2:  MOVWF  07
....................    delay_us(1);  
06A3:  NOP
06A4:  NOP
06A5:  NOP
06A6:  NOP
06A7:  NOP
....................    output_bit(sht_clk_pin, 1);                          //clk high  
06A8:  BCF    03.5
06A9:  BSF    07.3
06AA:  BCF    21.3
06AB:  MOVF   21,W
06AC:  BSF    03.5
06AD:  MOVWF  07
....................    delay_us(1);  
06AE:  NOP
06AF:  NOP
06B0:  NOP
06B1:  NOP
06B2:  NOP
....................    mask = mask >> 1;                                    //shift to next bit  
06B3:  BCF    03.0
06B4:  BCF    03.5
06B5:  RRF    4F,F
....................   }  
06B6:  INCF   4E,F
06B7:  GOTO   68B
....................   
....................  //Shift in ack  
....................  output_bit(sht_clk_pin, 0);  //clk low  
06B8:  BCF    07.3
06B9:  BCF    21.3
06BA:  MOVF   21,W
06BB:  BSF    03.5
06BC:  MOVWF  07
....................  delay_us(1);  
06BD:  NOP
06BE:  NOP
06BF:  NOP
06C0:  NOP
06C1:  NOP
....................  ack = input(sht_data_pin);   //get ack bit  
06C2:  BCF    03.5
06C3:  BSF    21.4
06C4:  MOVF   21,W
06C5:  BSF    03.5
06C6:  MOVWF  07
06C7:  BCF    03.5
06C8:  BTFSC  07.4
06C9:  GOTO   6CC
06CA:  BCF    50.0
06CB:  GOTO   6CD
06CC:  BSF    50.0
....................  output_bit(sht_clk_pin, 1);  //clk high  
06CD:  BSF    07.3
06CE:  BCF    21.3
06CF:  MOVF   21,W
06D0:  BSF    03.5
06D1:  MOVWF  07
....................  delay_us(1);  
06D2:  NOP
06D3:  NOP
06D4:  NOP
06D5:  NOP
06D6:  NOP
....................  output_bit(sht_clk_pin, 0);  //clk low  
06D7:  BCF    03.5
06D8:  BCF    07.3
06D9:  BCF    21.3
06DA:  MOVF   21,W
06DB:  BSF    03.5
06DC:  MOVWF  07
....................  return(ack);  
06DD:  MOVLW  00
06DE:  BCF    03.5
06DF:  BTFSC  50.0
06E0:  MOVLW  01
06E1:  MOVWF  78
.................... }  
06E2:  RETLW  00
....................   
....................   
.................... //***** Function to read data from SHT75 *****  
....................   
.................... int16 comread (void)  
.................... {  
....................  int8 i;  
....................  int16 iobyte = 0;  
*
070E:  CLRF   4E
070F:  CLRF   4F
....................  const int16 mask0 = 0x0000;  
....................  const int16 mask1 = 0x0001;  
....................   
....................  //shift in MSB data  
....................  for(i=0; i<8; i++)  
0710:  CLRF   4D
0711:  MOVF   4D,W
0712:  SUBLW  07
0713:  BTFSS  03.0
0714:  GOTO   737
....................   {  
....................    iobyte = iobyte << 1;  
0715:  BCF    03.0
0716:  RLF    4E,F
0717:  RLF    4F,F
....................    output_bit(sht_clk_pin, 1);                //clk high  
0718:  BSF    07.3
0719:  BCF    21.3
071A:  MOVF   21,W
071B:  BSF    03.5
071C:  MOVWF  07
....................    delay_us(1);  
071D:  NOP
071E:  NOP
071F:  NOP
0720:  NOP
0721:  NOP
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit  
0722:  BCF    03.5
0723:  BSF    21.4
0724:  MOVF   21,W
0725:  BSF    03.5
0726:  MOVWF  07
0727:  BCF    03.5
0728:  BTFSC  07.4
0729:  BSF    4E.0
....................    else iobyte |= mask0;  
....................    output_bit(sht_clk_pin, 0);                //clk low  
072A:  BCF    07.3
072B:  BCF    21.3
072C:  MOVF   21,W
072D:  BSF    03.5
072E:  MOVWF  07
....................    delay_us(1);  
072F:  NOP
0730:  NOP
0731:  NOP
0732:  NOP
0733:  NOP
....................   }  
0734:  BCF    03.5
0735:  INCF   4D,F
0736:  GOTO   711
....................   
....................  //send ack 0 bit  
....................  output_bit(sht_data_pin, 0); //data low  
0737:  BCF    07.4
0738:  BCF    21.4
0739:  MOVF   21,W
073A:  BSF    03.5
073B:  MOVWF  07
....................  delay_us(1);  
073C:  NOP
073D:  NOP
073E:  NOP
073F:  NOP
0740:  NOP
....................  output_bit(sht_clk_pin, 1);  //clk high  
0741:  BCF    03.5
0742:  BSF    07.3
0743:  BCF    21.3
0744:  MOVF   21,W
0745:  BSF    03.5
0746:  MOVWF  07
....................  delay_us(2);  
0747:  MOVLW  03
0748:  MOVWF  77
0749:  DECFSZ 77,F
074A:  GOTO   749
....................  output_bit(sht_clk_pin, 0);  //clk low  
074B:  BCF    03.5
074C:  BCF    07.3
074D:  BCF    21.3
074E:  MOVF   21,W
074F:  BSF    03.5
0750:  MOVWF  07
....................  delay_us(1);  
0751:  NOP
0752:  NOP
0753:  NOP
0754:  NOP
0755:  NOP
....................  output_float(sht_data_pin);  //data high  
0756:  BSF    07.4
....................   
....................  //shift in LSB data  
....................  for(i=0; i<8; i++)  
0757:  BCF    03.5
0758:  CLRF   4D
0759:  MOVF   4D,W
075A:  SUBLW  07
075B:  BTFSS  03.0
075C:  GOTO   77F
....................   {  
....................    iobyte = iobyte << 1;  
075D:  BCF    03.0
075E:  RLF    4E,F
075F:  RLF    4F,F
....................    output_bit(sht_clk_pin, 1);                //clk high  
0760:  BSF    07.3
0761:  BCF    21.3
0762:  MOVF   21,W
0763:  BSF    03.5
0764:  MOVWF  07
....................    delay_us(1);  
0765:  NOP
0766:  NOP
0767:  NOP
0768:  NOP
0769:  NOP
....................    if (input(sht_data_pin)) iobyte |= mask1;  //shift in data bit  
076A:  BCF    03.5
076B:  BSF    21.4
076C:  MOVF   21,W
076D:  BSF    03.5
076E:  MOVWF  07
076F:  BCF    03.5
0770:  BTFSC  07.4
0771:  BSF    4E.0
....................    else iobyte |= mask0;  
....................    output_bit(sht_clk_pin, 0);                //clk low  
0772:  BCF    07.3
0773:  BCF    21.3
0774:  MOVF   21,W
0775:  BSF    03.5
0776:  MOVWF  07
....................    delay_us(1);  
0777:  NOP
0778:  NOP
0779:  NOP
077A:  NOP
077B:  NOP
....................   }  
077C:  BCF    03.5
077D:  INCF   4D,F
077E:  GOTO   759
....................   
....................  //send ack 1 bit  
....................  output_float(sht_data_pin);  //data high  
077F:  BSF    03.5
0780:  BSF    07.4
....................  delay_us(1);  
0781:  NOP
0782:  NOP
0783:  NOP
0784:  NOP
0785:  NOP
....................  output_bit(sht_clk_pin, 1);  //clk high  
0786:  BCF    03.5
0787:  BSF    07.3
0788:  BCF    21.3
0789:  MOVF   21,W
078A:  BSF    03.5
078B:  MOVWF  07
....................  delay_us(2);  
078C:  MOVLW  03
078D:  MOVWF  77
078E:  DECFSZ 77,F
078F:  GOTO   78E
....................  output_bit(sht_clk_pin, 0);  //clk low  
0790:  BCF    03.5
0791:  BCF    07.3
0792:  BCF    21.3
0793:  MOVF   21,W
0794:  BSF    03.5
0795:  MOVWF  07
....................   
....................  return(iobyte);  
0796:  BCF    03.5
0797:  MOVF   4E,W
0798:  MOVWF  78
0799:  MOVF   4F,W
079A:  MOVWF  79
.................... }  
079B:  RETLW  00
....................   
....................   
.................... //***** Function to wait for SHT75 reading *****  
....................   
.................... void comwait (void)  
.................... {  
....................  int16 sht_delay;  
....................   
....................  output_float(sht_data_pin);                     //data high  
*
06E3:  BSF    03.5
06E4:  BSF    07.4
....................  output_bit(sht_clk_pin, 0);                     //clk low  
06E5:  BCF    03.5
06E6:  BCF    07.3
06E7:  BCF    21.3
06E8:  MOVF   21,W
06E9:  BSF    03.5
06EA:  MOVWF  07
....................  delay_us(1);  
06EB:  NOP
06EC:  NOP
06ED:  NOP
06EE:  NOP
06EF:  NOP
....................  for(sht_delay=0; sht_delay<30000; sht_delay++)  // wait for max 300ms  
06F0:  BCF    03.5
06F1:  CLRF   4E
06F2:  CLRF   4D
06F3:  MOVF   4E,W
06F4:  SUBLW  75
06F5:  BTFSS  03.0
06F6:  GOTO   70D
06F7:  BTFSS  03.2
06F8:  GOTO   6FD
06F9:  MOVF   4D,W
06FA:  SUBLW  2F
06FB:  BTFSS  03.0
06FC:  GOTO   70D
....................   {  
....................    if (!input(sht_data_pin)) break;              //if sht_data_pin low, SHT75 ready  
06FD:  BSF    21.4
06FE:  MOVF   21,W
06FF:  BSF    03.5
0700:  MOVWF  07
0701:  BCF    03.5
0702:  BTFSS  07.4
0703:  GOTO   70D
....................    delay_us(10);  
0704:  MOVLW  10
0705:  MOVWF  77
0706:  DECFSZ 77,F
0707:  GOTO   706
0708:  NOP
....................   }  
0709:  INCF   4D,F
070A:  BTFSC  03.2
070B:  INCF   4E,F
070C:  GOTO   6F3
.................... }  
070D:  RETLW  00
....................   
....................   
.................... //***** Function to reset SHT75 communication *****  
....................   
.................... void comreset (void)  
.................... {  
....................  int8 i;  
....................   
....................  output_float(sht_data_pin);    //data high  
*
013E:  BSF    03.5
013F:  BSF    07.4
....................  output_bit(sht_clk_pin, 0);    //clk low  
0140:  BCF    03.5
0141:  BCF    07.3
0142:  BCF    21.3
0143:  MOVF   21,W
0144:  BSF    03.5
0145:  MOVWF  07
....................  delay_us(2);  
0146:  MOVLW  03
0147:  MOVWF  77
0148:  DECFSZ 77,F
0149:  GOTO   148
....................  for(i=0; i<9; i++)  
014A:  BCF    03.5
014B:  CLRF   3A
014C:  MOVF   3A,W
014D:  SUBLW  08
014E:  BTFSS  03.0
014F:  GOTO   166
....................   {  
....................    output_bit(sht_clk_pin, 1);  //toggle clk 9 times  
0150:  BSF    07.3
0151:  BCF    21.3
0152:  MOVF   21,W
0153:  BSF    03.5
0154:  MOVWF  07
....................    delay_us(2);  
0155:  MOVLW  03
0156:  MOVWF  77
0157:  DECFSZ 77,F
0158:  GOTO   157
....................    output_bit(sht_clk_pin, 0);  
0159:  BCF    03.5
015A:  BCF    07.3
015B:  BCF    21.3
015C:  MOVF   21,W
015D:  BSF    03.5
015E:  MOVWF  07
....................    delay_us(2);  
015F:  MOVLW  03
0160:  MOVWF  77
0161:  DECFSZ 77,F
0162:  GOTO   161
....................  }  
0163:  BCF    03.5
0164:  INCF   3A,F
0165:  GOTO   14C
....................  comstart();  
0166:  CALL   0F8
.................... }  
....................   
....................   
.................... //***** Function to soft reset SHT75 *****  
....................   
.................... void sht_soft_reset (void)  
.................... {  
....................  comreset();           //SHT75 communication reset  
....................  comwrite(0x1e);       //send SHT75 reset command  
....................  delay_ms(15);         //pause 15 ms  
.................... }  
....................   
....................   
.................... //***** Function to measure SHT75 temperature *****  
....................   
.................... int16 measuretemp (void)  
.................... {  
....................  int1 ack;  
....................  int16 iobyte;  
....................   
....................  comstart();             //alert SHT75  
*
0CC7:  BCF    0A.3
0CC8:  CALL   0F8
0CC9:  BSF    0A.3
....................  ack = comwrite(0x03);   //send measure temp command and read ack status  
0CCA:  MOVLW  03
0CCB:  MOVWF  4D
0CCC:  BCF    0A.3
0CCD:  CALL   683
0CCE:  BSF    0A.3
0CCF:  BTFSC  78.0
0CD0:  GOTO   4D3
0CD1:  BCF    4A.0
0CD2:  GOTO   4D4
0CD3:  BSF    4A.0
....................  if(ack == 1) return;  
0CD4:  MOVLW  00
0CD5:  BTFSC  4A.0
0CD6:  MOVLW  01
0CD7:  SUBLW  01
0CD8:  BTFSC  03.2
0CD9:  GOTO   4E8
....................  comwait();              //wait for SHT75 measurement to complete  
0CDA:  BCF    0A.3
0CDB:  CALL   6E3
0CDC:  BSF    0A.3
....................  iobyte = comread();     //read SHT75 temp data  
0CDD:  BCF    0A.3
0CDE:  CALL   70E
0CDF:  BSF    0A.3
0CE0:  MOVF   79,W
0CE1:  MOVWF  4C
0CE2:  MOVF   78,W
0CE3:  MOVWF  4B
....................  return(iobyte);  
0CE4:  MOVF   4B,W
0CE5:  MOVWF  78
0CE6:  MOVF   4C,W
0CE7:  MOVWF  79
.................... }  
....................   
....................   
.................... //***** Function to measure SHT75 RH *****  
....................   
.................... int16 measurehumid (void)  
.................... {  
....................  int1 ack;  
....................  int16 iobyte;  
....................   
....................  comstart();            //alert SHT75  
*
0CEC:  BCF    0A.3
0CED:  CALL   0F8
0CEE:  BSF    0A.3
....................  ack = comwrite(0x05);  //send measure RH command and read ack status  
0CEF:  MOVLW  05
0CF0:  MOVWF  4D
0CF1:  BCF    0A.3
0CF2:  CALL   683
0CF3:  BSF    0A.3
0CF4:  BTFSC  78.0
0CF5:  GOTO   4F8
0CF6:  BCF    4A.0
0CF7:  GOTO   4F9
0CF8:  BSF    4A.0
....................  if(ack == 1) return;  
0CF9:  MOVLW  00
0CFA:  BTFSC  4A.0
0CFB:  MOVLW  01
0CFC:  SUBLW  01
0CFD:  BTFSC  03.2
0CFE:  GOTO   50D
....................  comwait();             //wait for SHT75 measurement to complete  
0CFF:  BCF    0A.3
0D00:  CALL   6E3
0D01:  BSF    0A.3
....................  iobyte = comread();    //read SHT75 temp data  
0D02:  BCF    0A.3
0D03:  CALL   70E
0D04:  BSF    0A.3
0D05:  MOVF   79,W
0D06:  MOVWF  4C
0D07:  MOVF   78,W
0D08:  MOVWF  4B
....................  return(iobyte);  
0D09:  MOVF   4B,W
0D0A:  MOVWF  78
0D0B:  MOVF   4C,W
0D0C:  MOVWF  79
.................... }  
....................   
....................   
.................... //***** Function to calculate SHT75 temp & RH *****  
....................   
.................... void calculate_data (int16 temp, int16 humid, float & tc, float & rhlin, float & rhtrue)  
.................... {  
....................  float truehumid1, rh;  
....................   
....................  //calculate temperature reading  
....................  tc = ((float) temp * 0.01) - 40.0;  
*
0D19:  MOVF   4B,W
0D1A:  MOVWF  63
0D1B:  MOVF   4A,W
0D1C:  MOVWF  62
0D1D:  BCF    0A.3
0D1E:  CALL   468
0D1F:  BSF    0A.3
0D20:  MOVF   77,W
0D21:  MOVWF  56
0D22:  MOVF   78,W
0D23:  MOVWF  57
0D24:  MOVF   79,W
0D25:  MOVWF  58
0D26:  MOVF   7A,W
0D27:  MOVWF  59
0D28:  MOVWF  6D
0D29:  MOVF   79,W
0D2A:  MOVWF  6C
0D2B:  MOVF   78,W
0D2C:  MOVWF  6B
0D2D:  MOVF   77,W
0D2E:  MOVWF  6A
0D2F:  MOVLW  0A
0D30:  MOVWF  71
0D31:  MOVLW  D7
0D32:  MOVWF  70
0D33:  MOVLW  23
0D34:  MOVWF  6F
0D35:  MOVLW  78
0D36:  MOVWF  6E
0D37:  BCF    0A.3
0D38:  CALL   486
0D39:  BSF    0A.3
0D3A:  MOVF   77,W
0D3B:  MOVWF  5A
0D3C:  MOVF   78,W
0D3D:  MOVWF  5B
0D3E:  MOVF   79,W
0D3F:  MOVWF  5C
0D40:  MOVF   7A,W
0D41:  MOVWF  5D
0D42:  BSF    03.1
0D43:  MOVF   7A,W
0D44:  MOVWF  71
0D45:  MOVF   79,W
0D46:  MOVWF  70
0D47:  MOVF   78,W
0D48:  MOVWF  6F
0D49:  MOVF   77,W
0D4A:  MOVWF  6E
0D4B:  CLRF   75
0D4C:  CLRF   74
0D4D:  MOVLW  20
0D4E:  MOVWF  73
0D4F:  MOVLW  84
0D50:  MOVWF  72
0D51:  BCF    0A.3
0D52:  CALL   16D
0D53:  BSF    0A.3
0D54:  MOVF   7A,W
0D55:  MOVWF  35
0D56:  MOVF   79,W
0D57:  MOVWF  34
0D58:  MOVF   78,W
0D59:  MOVWF  33
0D5A:  MOVF   77,W
0D5B:  MOVWF  32
....................   
....................  //calculate Real RH reading  
....................  rh = (float) humid;  
0D5C:  MOVF   4D,W
0D5D:  MOVWF  63
0D5E:  MOVF   4C,W
0D5F:  MOVWF  62
0D60:  BCF    0A.3
0D61:  CALL   468
0D62:  BSF    0A.3
0D63:  MOVF   7A,W
0D64:  MOVWF  55
0D65:  MOVF   79,W
0D66:  MOVWF  54
0D67:  MOVF   78,W
0D68:  MOVWF  53
0D69:  MOVF   77,W
0D6A:  MOVWF  52
....................   
....................  rhlin = (rh * 0.0405) - (rh * rh * 0.0000028) - 4.0;  
0D6B:  MOVF   55,W
0D6C:  MOVWF  6D
0D6D:  MOVF   54,W
0D6E:  MOVWF  6C
0D6F:  MOVF   53,W
0D70:  MOVWF  6B
0D71:  MOVF   52,W
0D72:  MOVWF  6A
0D73:  MOVLW  54
0D74:  MOVWF  71
0D75:  MOVLW  E3
0D76:  MOVWF  70
0D77:  MOVLW  25
0D78:  MOVWF  6F
0D79:  MOVLW  7A
0D7A:  MOVWF  6E
0D7B:  BCF    0A.3
0D7C:  CALL   486
0D7D:  BSF    0A.3
0D7E:  MOVF   77,W
0D7F:  MOVWF  56
0D80:  MOVF   78,W
0D81:  MOVWF  57
0D82:  MOVF   79,W
0D83:  MOVWF  58
0D84:  MOVF   7A,W
0D85:  MOVWF  59
0D86:  MOVF   55,W
0D87:  MOVWF  6D
0D88:  MOVF   54,W
0D89:  MOVWF  6C
0D8A:  MOVF   53,W
0D8B:  MOVWF  6B
0D8C:  MOVF   52,W
0D8D:  MOVWF  6A
0D8E:  MOVF   55,W
0D8F:  MOVWF  71
0D90:  MOVF   54,W
0D91:  MOVWF  70
0D92:  MOVF   53,W
0D93:  MOVWF  6F
0D94:  MOVF   52,W
0D95:  MOVWF  6E
0D96:  BCF    0A.3
0D97:  CALL   486
0D98:  BSF    0A.3
0D99:  MOVF   77,W
0D9A:  MOVWF  5A
0D9B:  MOVF   78,W
0D9C:  MOVWF  5B
0D9D:  MOVF   79,W
0D9E:  MOVWF  5C
0D9F:  MOVF   7A,W
0DA0:  MOVWF  5D
0DA1:  MOVWF  6D
0DA2:  MOVF   79,W
0DA3:  MOVWF  6C
0DA4:  MOVF   78,W
0DA5:  MOVWF  6B
0DA6:  MOVF   77,W
0DA7:  MOVWF  6A
0DA8:  MOVLW  A2
0DA9:  MOVWF  71
0DAA:  MOVLW  E7
0DAB:  MOVWF  70
0DAC:  MOVLW  3B
0DAD:  MOVWF  6F
0DAE:  MOVLW  6C
0DAF:  MOVWF  6E
0DB0:  BCF    0A.3
0DB1:  CALL   486
0DB2:  BSF    0A.3
0DB3:  BSF    03.1
0DB4:  MOVF   59,W
0DB5:  MOVWF  71
0DB6:  MOVF   58,W
0DB7:  MOVWF  70
0DB8:  MOVF   57,W
0DB9:  MOVWF  6F
0DBA:  MOVF   56,W
0DBB:  MOVWF  6E
0DBC:  MOVF   7A,W
0DBD:  MOVWF  75
0DBE:  MOVF   79,W
0DBF:  MOVWF  74
0DC0:  MOVF   78,W
0DC1:  MOVWF  73
0DC2:  MOVF   77,W
0DC3:  MOVWF  72
0DC4:  BCF    0A.3
0DC5:  CALL   16D
0DC6:  BSF    0A.3
0DC7:  MOVF   77,W
0DC8:  MOVWF  5E
0DC9:  MOVF   78,W
0DCA:  MOVWF  5F
0DCB:  MOVF   79,W
0DCC:  MOVWF  60
0DCD:  MOVF   7A,W
0DCE:  MOVWF  61
0DCF:  BSF    03.1
0DD0:  MOVF   7A,W
0DD1:  MOVWF  71
0DD2:  MOVF   79,W
0DD3:  MOVWF  70
0DD4:  MOVF   78,W
0DD5:  MOVWF  6F
0DD6:  MOVF   77,W
0DD7:  MOVWF  6E
0DD8:  CLRF   75
0DD9:  CLRF   74
0DDA:  CLRF   73
0DDB:  MOVLW  81
0DDC:  MOVWF  72
0DDD:  BCF    0A.3
0DDE:  CALL   16D
0DDF:  BSF    0A.3
0DE0:  MOVF   7A,W
0DE1:  MOVWF  41
0DE2:  MOVF   79,W
0DE3:  MOVWF  40
0DE4:  MOVF   78,W
0DE5:  MOVWF  3F
0DE6:  MOVF   77,W
0DE7:  MOVWF  3E
....................   
....................  //calculate True RH reading  
....................  rhtrue = ((tc - 25.0) * (0.01 + (0.00008 * rh))) + rhlin;  
0DE8:  BSF    03.1
0DE9:  MOVF   35,W
0DEA:  MOVWF  71
0DEB:  MOVF   34,W
0DEC:  MOVWF  70
0DED:  MOVF   33,W
0DEE:  MOVWF  6F
0DEF:  MOVF   32,W
0DF0:  MOVWF  6E
0DF1:  CLRF   75
0DF2:  CLRF   74
0DF3:  MOVLW  48
0DF4:  MOVWF  73
0DF5:  MOVLW  83
0DF6:  MOVWF  72
0DF7:  BCF    0A.3
0DF8:  CALL   16D
0DF9:  BSF    0A.3
0DFA:  MOVF   77,W
0DFB:  MOVWF  56
0DFC:  MOVF   78,W
0DFD:  MOVWF  57
0DFE:  MOVF   79,W
0DFF:  MOVWF  58
0E00:  MOVF   7A,W
0E01:  MOVWF  59
0E02:  MOVLW  AC
0E03:  MOVWF  6D
0E04:  MOVLW  C5
0E05:  MOVWF  6C
0E06:  MOVLW  27
0E07:  MOVWF  6B
0E08:  MOVLW  71
0E09:  MOVWF  6A
0E0A:  MOVF   55,W
0E0B:  MOVWF  71
0E0C:  MOVF   54,W
0E0D:  MOVWF  70
0E0E:  MOVF   53,W
0E0F:  MOVWF  6F
0E10:  MOVF   52,W
0E11:  MOVWF  6E
0E12:  BCF    0A.3
0E13:  CALL   486
0E14:  BSF    0A.3
0E15:  BCF    03.1
0E16:  MOVLW  0A
0E17:  MOVWF  71
0E18:  MOVLW  D7
0E19:  MOVWF  70
0E1A:  MOVLW  23
0E1B:  MOVWF  6F
0E1C:  MOVLW  78
0E1D:  MOVWF  6E
0E1E:  MOVF   7A,W
0E1F:  MOVWF  75
0E20:  MOVF   79,W
0E21:  MOVWF  74
0E22:  MOVF   78,W
0E23:  MOVWF  73
0E24:  MOVF   77,W
0E25:  MOVWF  72
0E26:  BCF    0A.3
0E27:  CALL   16D
0E28:  BSF    0A.3
0E29:  MOVF   59,W
0E2A:  MOVWF  6D
0E2B:  MOVF   58,W
0E2C:  MOVWF  6C
0E2D:  MOVF   57,W
0E2E:  MOVWF  6B
0E2F:  MOVF   56,W
0E30:  MOVWF  6A
0E31:  MOVF   7A,W
0E32:  MOVWF  71
0E33:  MOVF   79,W
0E34:  MOVWF  70
0E35:  MOVF   78,W
0E36:  MOVWF  6F
0E37:  MOVF   77,W
0E38:  MOVWF  6E
0E39:  BCF    0A.3
0E3A:  CALL   486
0E3B:  BSF    0A.3
0E3C:  MOVF   77,W
0E3D:  MOVWF  5A
0E3E:  MOVF   78,W
0E3F:  MOVWF  5B
0E40:  MOVF   79,W
0E41:  MOVWF  5C
0E42:  MOVF   7A,W
0E43:  MOVWF  5D
0E44:  BCF    03.1
0E45:  MOVF   7A,W
0E46:  MOVWF  71
0E47:  MOVF   79,W
0E48:  MOVWF  70
0E49:  MOVF   78,W
0E4A:  MOVWF  6F
0E4B:  MOVF   77,W
0E4C:  MOVWF  6E
0E4D:  MOVF   41,W
0E4E:  MOVWF  75
0E4F:  MOVF   40,W
0E50:  MOVWF  74
0E51:  MOVF   3F,W
0E52:  MOVWF  73
0E53:  MOVF   3E,W
0E54:  MOVWF  72
0E55:  BCF    0A.3
0E56:  CALL   16D
0E57:  BSF    0A.3
0E58:  MOVF   7A,W
0E59:  MOVWF  39
0E5A:  MOVF   79,W
0E5B:  MOVWF  38
0E5C:  MOVF   78,W
0E5D:  MOVWF  37
0E5E:  MOVF   77,W
0E5F:  MOVWF  36
.................... }  
....................   
....................   
.................... //***** Function to measure & calculate SHT75 temp & RH *****  
....................   
.................... void sht_rd (float & temp, float & truehumid)  
.................... {  
....................  int16 restemp, reshumid;  
....................  float realhumid;  
....................  restemp = 0; truehumid = 0;  
*
0CC1:  CLRF   3B
0CC2:  CLRF   3A
0CC3:  CLRF   39
0CC4:  CLRF   38
0CC5:  CLRF   37
0CC6:  CLRF   36
....................   
....................  restemp = measuretemp();    //measure temp  
*
0CE8:  MOVF   79,W
0CE9:  MOVWF  3B
0CEA:  MOVF   78,W
0CEB:  MOVWF  3A
....................  reshumid = measurehumid();  //measure RH  
*
0D0D:  MOVF   79,W
0D0E:  MOVWF  3D
0D0F:  MOVF   78,W
0D10:  MOVWF  3C
.................... calculate_data (restemp, reshumid, temp, realhumid, truehumid);  //calculate temp & RH  
0D11:  MOVF   3B,W
0D12:  MOVWF  4B
0D13:  MOVF   3A,W
0D14:  MOVWF  4A
0D15:  MOVF   3D,W
0D16:  MOVWF  4D
0D17:  MOVF   3C,W
0D18:  MOVWF  4C
.................... }  
....................   
....................   
.................... //***** Function to initialise SHT75 on power-up *****  
....................   
.................... void sht_init (void)  
.................... {  
....................  comreset();    //reset SHT75  
....................  delay_ms(20);  //delay for power-up  
*
0167:  MOVLW  14
0168:  MOVWF  3A
0169:  CALL   046
.................... }	  
016A:  BSF    0A.3
016B:  BCF    0A.4
016C:  GOTO   48F (RETURN)
....................  
....................   
.................... void rain(void);  
.................... void soil(void);  
.................... double map(double value, float x_min, float x_max, float y_min, float y_max);   
....................   
.................... unsigned int16 s;  
.................... float y,v,x=0.00;  
*
0C6D:  CLRF   2C
0C6E:  CLRF   2D
0C6F:  CLRF   2E
0C70:  CLRF   2F
.................... int a,r;  
.................... void main()  
.................... {  
*
0C57:  CLRF   04
0C58:  MOVLW  1F
0C59:  ANDWF  03,F
0C5A:  BSF    03.5
0C5B:  BSF    1F.0
0C5C:  BSF    1F.1
0C5D:  BSF    1F.2
0C5E:  BCF    1F.3
0C5F:  MOVLW  07
0C60:  BCF    03.5
0C61:  MOVWF  1F
0C62:  MOVLW  81
0C63:  BSF    03.5
0C64:  MOVWF  19
0C65:  MOVLW  26
0C66:  MOVWF  18
0C67:  MOVLW  90
0C68:  BCF    03.5
0C69:  MOVWF  18
....................  float restemp, truehumid;  
....................  trisa0=1;  
*
0C71:  BSF    03.5
0C72:  BSF    05.0
....................  trisa1=0;  
0C73:  BCF    05.1
....................  adcon1=0x0e;  
0C74:  MOVLW  0E
0C75:  MOVWF  1F
....................  trisb=0x00;  
0C76:  CLRF   06
....................  //trisd1=0;  
....................  lcdinit();  
0C77:  BCF    0A.3
0C78:  BCF    03.5
0C79:  GOTO   078
0C7A:  BSF    0A.3
....................  go(0);  
0C7B:  CLRF   3A
0C7C:  BCF    0A.3
0C7D:  GOTO   0EE
0C7E:  BSF    0A.3
....................  printc("  RAIN GUAGE  ");  
0C7F:  CLRF   3A
0C80:  MOVF   3A,W
0C81:  BCF    0A.3
0C82:  CALL   004
0C83:  BSF    0A.3
0C84:  IORLW  00
0C85:  BTFSC  03.2
0C86:  GOTO   48D
0C87:  INCF   3A,F
0C88:  MOVWF  3C
0C89:  BCF    0A.3
0C8A:  CALL   0DB
0C8B:  BSF    0A.3
0C8C:  GOTO   480
....................  sht_init();  
0C8D:  BCF    0A.3
0C8E:  GOTO   13E
0C8F:  BSF    0A.3
....................   
....................  while(1)  
....................  {  
....................    rain();	   
0C90:  BCF    0A.3
0C91:  GOTO   2C0
0C92:  BSF    0A.3
....................    setup_adc(ADC_CLOCK_INTERNAL);  
0C93:  BSF    03.5
0C94:  BCF    1F.6
0C95:  BCF    03.5
0C96:  BSF    1F.6
0C97:  BSF    1F.7
0C98:  BSF    03.5
0C99:  BSF    1F.7
0C9A:  BCF    03.5
0C9B:  BSF    1F.0
....................    //printf("BGW:");  
....................    printf("RAIN;%3.2f;",x);  
0C9C:  CLRF   3A
0C9D:  MOVF   3A,W
0C9E:  BCF    0A.3
0C9F:  CALL   017
0CA0:  BSF    0A.3
0CA1:  INCF   3A,F
0CA2:  MOVWF  77
0CA3:  MOVF   77,W
0CA4:  BTFSS  0C.4
0CA5:  GOTO   4A4
0CA6:  MOVWF  19
0CA7:  MOVLW  05
0CA8:  SUBWF  3A,W
0CA9:  BTFSS  03.2
0CAA:  GOTO   49D
0CAB:  MOVF   2F,W
0CAC:  MOVWF  3E
0CAD:  MOVF   2E,W
0CAE:  MOVWF  3D
0CAF:  MOVF   2D,W
0CB0:  MOVWF  3C
0CB1:  MOVF   2C,W
0CB2:  MOVWF  3B
0CB3:  CLRF   42
0CB4:  CLRF   41
0CB5:  MOVLW  01
0CB6:  MOVWF  40
0CB7:  MOVLW  02
0CB8:  MOVWF  3F
0CB9:  BCF    0A.3
0CBA:  CALL   2E7
0CBB:  BSF    0A.3
0CBC:  MOVLW  3B
0CBD:  BTFSS  0C.4
0CBE:  GOTO   4BD
0CBF:  MOVWF  19
....................    soil();  
0CC0:  GOTO   000
....................    sht_rd (restemp, truehumid);  
....................    printf("Temp;%3.1f;", restemp, 223);  
*
0E60:  CLRF   3A
0E61:  MOVF   3A,W
0E62:  BCF    0A.3
0E63:  CALL   027
0E64:  BSF    0A.3
0E65:  INCF   3A,F
0E66:  MOVWF  77
0E67:  MOVF   77,W
0E68:  BTFSS  0C.4
0E69:  GOTO   668
0E6A:  MOVWF  19
0E6B:  MOVLW  05
0E6C:  SUBWF  3A,W
0E6D:  BTFSS  03.2
0E6E:  GOTO   661
0E6F:  MOVF   35,W
0E70:  MOVWF  3E
0E71:  MOVF   34,W
0E72:  MOVWF  3D
0E73:  MOVF   33,W
0E74:  MOVWF  3C
0E75:  MOVF   32,W
0E76:  MOVWF  3B
0E77:  CLRF   42
0E78:  CLRF   41
0E79:  MOVLW  01
0E7A:  MOVWF  40
0E7B:  MOVWF  3F
0E7C:  BCF    0A.3
0E7D:  CALL   2E7
0E7E:  BSF    0A.3
0E7F:  MOVLW  3B
0E80:  BTFSS  0C.4
0E81:  GOTO   680
0E82:  MOVWF  19
....................    printf("RH;%3.1f\n", truehumid);  
0E83:  MOVLW  52
0E84:  BTFSS  0C.4
0E85:  GOTO   684
0E86:  MOVWF  19
0E87:  MOVLW  48
0E88:  BTFSS  0C.4
0E89:  GOTO   688
0E8A:  MOVWF  19
0E8B:  MOVLW  3B
0E8C:  BTFSS  0C.4
0E8D:  GOTO   68C
0E8E:  MOVWF  19
0E8F:  MOVF   39,W
0E90:  MOVWF  3E
0E91:  MOVF   38,W
0E92:  MOVWF  3D
0E93:  MOVF   37,W
0E94:  MOVWF  3C
0E95:  MOVF   36,W
0E96:  MOVWF  3B
0E97:  CLRF   42
0E98:  CLRF   41
0E99:  MOVLW  01
0E9A:  MOVWF  40
0E9B:  MOVWF  3F
0E9C:  BCF    0A.3
0E9D:  CALL   2E7
0E9E:  BSF    0A.3
0E9F:  MOVLW  0A
0EA0:  BTFSS  0C.4
0EA1:  GOTO   6A0
0EA2:  MOVWF  19
....................    delay_ms(50);        //delay 500 ms between reading to prevent self heating of sensor  
0EA3:  MOVLW  32
0EA4:  MOVWF  3A
0EA5:  BCF    0A.3
0EA6:  CALL   046
0EA7:  BSF    0A.3
....................  }  
0EA8:  GOTO   490
.................... }  
....................   
.................... /*  
.................... ////////////////////////END OF MAIN PROGRAM //////////////////////////////////////  
.................... */  
....................   
.................... void rain()  
.................... {  
0EA9:  SLEEP
....................   a=input(PIN_A1);  
*
02C0:  BSF    03.5
02C1:  BSF    05.1
02C2:  BCF    03.5
02C3:  CLRF   30
02C4:  BTFSC  05.1
02C5:  INCF   30,F
....................   if(a)  
02C6:  MOVF   30,F
02C7:  BTFSC  03.2
02C8:  GOTO   2E4
....................   {  
.................... 	x=x+0.2;    
02C9:  BCF    03.1
02CA:  MOVF   2F,W
02CB:  MOVWF  71
02CC:  MOVF   2E,W
02CD:  MOVWF  70
02CE:  MOVF   2D,W
02CF:  MOVWF  6F
02D0:  MOVF   2C,W
02D1:  MOVWF  6E
02D2:  MOVLW  CD
02D3:  MOVWF  75
02D4:  MOVLW  CC
02D5:  MOVWF  74
02D6:  MOVLW  4C
02D7:  MOVWF  73
02D8:  MOVLW  7C
02D9:  MOVWF  72
02DA:  CALL   16D
02DB:  MOVF   7A,W
02DC:  MOVWF  2F
02DD:  MOVF   79,W
02DE:  MOVWF  2E
02DF:  MOVF   78,W
02E0:  MOVWF  2D
02E1:  MOVF   77,W
02E2:  MOVWF  2C
.................... 	r++	  ;  
02E3:  INCF   31,F
....................     //printf("%d",r);  
....................     //printf("RAIN = %3.2f",x);  
....................     //delay_ms(500); 	  
....................   }    
.................... }  
02E4:  BSF    0A.3
02E5:  BCF    0A.4
02E6:  GOTO   492 (RETURN)
.................... 	  
.................... void soil()  
.................... {  
....................   //setup_adc_ports(AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF);//to setup a0 as analog read and a3 as reference	  
....................   set_adc_channel(0);  
*
0800:  MOVLW  00
0801:  MOVWF  78
0802:  MOVF   1F,W
0803:  ANDLW  C7
0804:  IORWF  78,W
0805:  MOVWF  1F
....................   delay_us(20);  
0806:  MOVLW  21
0807:  MOVWF  77
0808:  DECFSZ 77,F
0809:  GOTO   008
....................   s=read_adc();  
080A:  BSF    1F.2
080B:  BTFSC  1F.2
080C:  GOTO   00B
080D:  BSF    03.5
080E:  MOVF   1E,W
080F:  BCF    03.5
0810:  MOVWF  22
0811:  MOVF   1E,W
0812:  MOVWF  23
....................   //printf("VALUE=%lu\t",s);  
....................   y= 0.0048 * s;  
0813:  MOVF   23,W
0814:  MOVWF  63
0815:  MOVF   22,W
0816:  MOVWF  62
0817:  BCF    0A.3
0818:  CALL   468
0819:  BSF    0A.3
081A:  MOVLW  52
081B:  MOVWF  6D
081C:  MOVLW  49
081D:  MOVWF  6C
081E:  MOVLW  1D
081F:  MOVWF  6B
0820:  MOVLW  77
0821:  MOVWF  6A
0822:  MOVF   7A,W
0823:  MOVWF  71
0824:  MOVF   79,W
0825:  MOVWF  70
0826:  MOVF   78,W
0827:  MOVWF  6F
0828:  MOVF   77,W
0829:  MOVWF  6E
082A:  BCF    0A.3
082B:  CALL   486
082C:  BSF    0A.3
082D:  MOVF   7A,W
082E:  MOVWF  27
082F:  MOVF   79,W
0830:  MOVWF  26
0831:  MOVF   78,W
0832:  MOVWF  25
0833:  MOVF   77,W
0834:  MOVWF  24
....................   //printf("SOIL=%f",y);   
....................   if(y > 0.00 && y < 0.25)  
0835:  CLRF   3D
0836:  CLRF   3C
0837:  CLRF   3B
0838:  CLRF   3A
0839:  MOVF   27,W
083A:  MOVWF  41
083B:  MOVF   26,W
083C:  MOVWF  40
083D:  MOVF   25,W
083E:  MOVWF  3F
083F:  MOVF   24,W
0840:  MOVWF  3E
0841:  BCF    0A.3
0842:  CALL   4FC
0843:  BSF    0A.3
0844:  BTFSS  03.0
0845:  GOTO   0B3
0846:  MOVF   27,W
0847:  MOVWF  3D
0848:  MOVF   26,W
0849:  MOVWF  3C
084A:  MOVF   25,W
084B:  MOVWF  3B
084C:  MOVF   24,W
084D:  MOVWF  3A
084E:  CLRF   41
084F:  CLRF   40
0850:  CLRF   3F
0851:  MOVLW  7D
0852:  MOVWF  3E
0853:  BCF    0A.3
0854:  CALL   4FC
0855:  BSF    0A.3
0856:  BTFSS  03.0
0857:  GOTO   0B3
....................   {  
....................   	  v = map(y, 0,0.25, 0,2.5);  
0858:  CLRF   3A
0859:  CLRF   3B
085A:  CLRF   3C
085B:  CLRF   3D
085C:  CLRF   3E
085D:  CLRF   3F
085E:  CLRF   40
085F:  CLRF   41
0860:  MOVF   27,W
0861:  MOVWF  45
0862:  MOVF   26,W
0863:  MOVWF  44
0864:  MOVF   25,W
0865:  MOVWF  43
0866:  MOVF   24,W
0867:  MOVWF  42
0868:  MOVF   3D,W
0869:  MOVWF  49
086A:  MOVF   3C,W
086B:  MOVWF  48
086C:  MOVF   3B,W
086D:  MOVWF  47
086E:  MOVF   3A,W
086F:  MOVWF  46
0870:  CLRF   4D
0871:  CLRF   4C
0872:  CLRF   4B
0873:  MOVLW  7D
0874:  MOVWF  4A
0875:  MOVF   41,W
0876:  MOVWF  51
0877:  MOVF   40,W
0878:  MOVWF  50
0879:  MOVF   3F,W
087A:  MOVWF  4F
087B:  MOVF   3E,W
087C:  MOVWF  4E
087D:  CLRF   55
087E:  CLRF   54
087F:  MOVLW  20
0880:  MOVWF  53
0881:  MOVLW  80
0882:  MOVWF  52
0883:  BCF    0A.3
0884:  CALL   608
0885:  BSF    0A.3
0886:  MOVF   7A,W
0887:  MOVWF  2B
0888:  MOVF   79,W
0889:  MOVWF  2A
088A:  MOVF   78,W
088B:  MOVWF  29
088C:  MOVF   77,W
088D:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
088E:  CLRF   3A
088F:  MOVF   3A,W
0890:  BCF    0A.3
0891:  CALL   037
0892:  BSF    0A.3
0893:  INCF   3A,F
0894:  MOVWF  77
0895:  MOVF   77,W
0896:  BTFSS  0C.4
0897:  GOTO   096
0898:  MOVWF  19
0899:  MOVLW  04
089A:  SUBWF  3A,W
089B:  BTFSS  03.2
089C:  GOTO   08F
089D:  MOVF   2B,W
089E:  MOVWF  3E
089F:  MOVF   2A,W
08A0:  MOVWF  3D
08A1:  MOVF   29,W
08A2:  MOVWF  3C
08A3:  MOVF   28,W
08A4:  MOVWF  3B
08A5:  CLRF   42
08A6:  CLRF   41
08A7:  MOVLW  01
08A8:  MOVWF  40
08A9:  MOVLW  03
08AA:  MOVWF  3F
08AB:  BCF    0A.3
08AC:  CALL   2E7
08AD:  BSF    0A.3
08AE:  MOVLW  3B
08AF:  BTFSS  0C.4
08B0:  GOTO   0AF
08B1:  MOVWF  19
....................   }  
....................   else if(y > 0.25 && y < 0.5)  
08B2:  GOTO   454
08B3:  CLRF   3D
08B4:  CLRF   3C
08B5:  CLRF   3B
08B6:  MOVLW  7D
08B7:  MOVWF  3A
08B8:  MOVF   27,W
08B9:  MOVWF  41
08BA:  MOVF   26,W
08BB:  MOVWF  40
08BC:  MOVF   25,W
08BD:  MOVWF  3F
08BE:  MOVF   24,W
08BF:  MOVWF  3E
08C0:  BCF    0A.3
08C1:  CALL   4FC
08C2:  BSF    0A.3
08C3:  BTFSS  03.0
08C4:  GOTO   125
08C5:  MOVF   27,W
08C6:  MOVWF  3D
08C7:  MOVF   26,W
08C8:  MOVWF  3C
08C9:  MOVF   25,W
08CA:  MOVWF  3B
08CB:  MOVF   24,W
08CC:  MOVWF  3A
08CD:  CLRF   41
08CE:  CLRF   40
08CF:  CLRF   3F
08D0:  MOVLW  7E
08D1:  MOVWF  3E
08D2:  BCF    0A.3
08D3:  CALL   4FC
08D4:  BSF    0A.3
08D5:  BTFSS  03.0
08D6:  GOTO   125
....................   {  
.................... 	  v = map(y, 0.25,0.5, 2.5,7.5);  
08D7:  MOVF   27,W
08D8:  MOVWF  45
08D9:  MOVF   26,W
08DA:  MOVWF  44
08DB:  MOVF   25,W
08DC:  MOVWF  43
08DD:  MOVF   24,W
08DE:  MOVWF  42
08DF:  CLRF   49
08E0:  CLRF   48
08E1:  CLRF   47
08E2:  MOVLW  7D
08E3:  MOVWF  46
08E4:  CLRF   4D
08E5:  CLRF   4C
08E6:  CLRF   4B
08E7:  MOVLW  7E
08E8:  MOVWF  4A
08E9:  CLRF   51
08EA:  CLRF   50
08EB:  MOVLW  20
08EC:  MOVWF  4F
08ED:  MOVLW  80
08EE:  MOVWF  4E
08EF:  CLRF   55
08F0:  CLRF   54
08F1:  MOVLW  70
08F2:  MOVWF  53
08F3:  MOVLW  81
08F4:  MOVWF  52
08F5:  BCF    0A.3
08F6:  CALL   608
08F7:  BSF    0A.3
08F8:  MOVF   7A,W
08F9:  MOVWF  2B
08FA:  MOVF   79,W
08FB:  MOVWF  2A
08FC:  MOVF   78,W
08FD:  MOVWF  29
08FE:  MOVF   77,W
08FF:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
0900:  CLRF   3A
0901:  MOVF   3A,W
0902:  BCF    0A.3
0903:  CALL   037
0904:  BSF    0A.3
0905:  INCF   3A,F
0906:  MOVWF  77
0907:  MOVF   77,W
0908:  BTFSS  0C.4
0909:  GOTO   108
090A:  MOVWF  19
090B:  MOVLW  04
090C:  SUBWF  3A,W
090D:  BTFSS  03.2
090E:  GOTO   101
090F:  MOVF   2B,W
0910:  MOVWF  3E
0911:  MOVF   2A,W
0912:  MOVWF  3D
0913:  MOVF   29,W
0914:  MOVWF  3C
0915:  MOVF   28,W
0916:  MOVWF  3B
0917:  CLRF   42
0918:  CLRF   41
0919:  MOVLW  01
091A:  MOVWF  40
091B:  MOVLW  03
091C:  MOVWF  3F
091D:  BCF    0A.3
091E:  CALL   2E7
091F:  BSF    0A.3
0920:  MOVLW  3B
0921:  BTFSS  0C.4
0922:  GOTO   121
0923:  MOVWF  19
....................   }   
....................    else if(y > 0.5 && y < 0.75)  
0924:  GOTO   454
0925:  CLRF   3D
0926:  CLRF   3C
0927:  CLRF   3B
0928:  MOVLW  7E
0929:  MOVWF  3A
092A:  MOVF   27,W
092B:  MOVWF  41
092C:  MOVF   26,W
092D:  MOVWF  40
092E:  MOVF   25,W
092F:  MOVWF  3F
0930:  MOVF   24,W
0931:  MOVWF  3E
0932:  BCF    0A.3
0933:  CALL   4FC
0934:  BSF    0A.3
0935:  BTFSS  03.0
0936:  GOTO   199
0937:  MOVF   27,W
0938:  MOVWF  3D
0939:  MOVF   26,W
093A:  MOVWF  3C
093B:  MOVF   25,W
093C:  MOVWF  3B
093D:  MOVF   24,W
093E:  MOVWF  3A
093F:  CLRF   41
0940:  CLRF   40
0941:  MOVLW  40
0942:  MOVWF  3F
0943:  MOVLW  7E
0944:  MOVWF  3E
0945:  BCF    0A.3
0946:  CALL   4FC
0947:  BSF    0A.3
0948:  BTFSS  03.0
0949:  GOTO   199
....................   {  
.................... 	  v = map(y, 0.5,0.75, 7.5,10.0);  
094A:  MOVF   27,W
094B:  MOVWF  45
094C:  MOVF   26,W
094D:  MOVWF  44
094E:  MOVF   25,W
094F:  MOVWF  43
0950:  MOVF   24,W
0951:  MOVWF  42
0952:  CLRF   49
0953:  CLRF   48
0954:  CLRF   47
0955:  MOVLW  7E
0956:  MOVWF  46
0957:  CLRF   4D
0958:  CLRF   4C
0959:  MOVLW  40
095A:  MOVWF  4B
095B:  MOVLW  7E
095C:  MOVWF  4A
095D:  CLRF   51
095E:  CLRF   50
095F:  MOVLW  70
0960:  MOVWF  4F
0961:  MOVLW  81
0962:  MOVWF  4E
0963:  CLRF   55
0964:  CLRF   54
0965:  MOVLW  20
0966:  MOVWF  53
0967:  MOVLW  82
0968:  MOVWF  52
0969:  BCF    0A.3
096A:  CALL   608
096B:  BSF    0A.3
096C:  MOVF   7A,W
096D:  MOVWF  2B
096E:  MOVF   79,W
096F:  MOVWF  2A
0970:  MOVF   78,W
0971:  MOVWF  29
0972:  MOVF   77,W
0973:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
0974:  CLRF   3A
0975:  MOVF   3A,W
0976:  BCF    0A.3
0977:  CALL   037
0978:  BSF    0A.3
0979:  INCF   3A,F
097A:  MOVWF  77
097B:  MOVF   77,W
097C:  BTFSS  0C.4
097D:  GOTO   17C
097E:  MOVWF  19
097F:  MOVLW  04
0980:  SUBWF  3A,W
0981:  BTFSS  03.2
0982:  GOTO   175
0983:  MOVF   2B,W
0984:  MOVWF  3E
0985:  MOVF   2A,W
0986:  MOVWF  3D
0987:  MOVF   29,W
0988:  MOVWF  3C
0989:  MOVF   28,W
098A:  MOVWF  3B
098B:  CLRF   42
098C:  CLRF   41
098D:  MOVLW  01
098E:  MOVWF  40
098F:  MOVLW  03
0990:  MOVWF  3F
0991:  BCF    0A.3
0992:  CALL   2E7
0993:  BSF    0A.3
0994:  MOVLW  3B
0995:  BTFSS  0C.4
0996:  GOTO   195
0997:  MOVWF  19
....................   }   
....................    else if(y > 0.75 && y < 1.0)  
0998:  GOTO   454
0999:  CLRF   3D
099A:  CLRF   3C
099B:  MOVLW  40
099C:  MOVWF  3B
099D:  MOVLW  7E
099E:  MOVWF  3A
099F:  MOVF   27,W
09A0:  MOVWF  41
09A1:  MOVF   26,W
09A2:  MOVWF  40
09A3:  MOVF   25,W
09A4:  MOVWF  3F
09A5:  MOVF   24,W
09A6:  MOVWF  3E
09A7:  BCF    0A.3
09A8:  CALL   4FC
09A9:  BSF    0A.3
09AA:  BTFSS  03.0
09AB:  GOTO   20D
09AC:  MOVF   27,W
09AD:  MOVWF  3D
09AE:  MOVF   26,W
09AF:  MOVWF  3C
09B0:  MOVF   25,W
09B1:  MOVWF  3B
09B2:  MOVF   24,W
09B3:  MOVWF  3A
09B4:  CLRF   41
09B5:  CLRF   40
09B6:  CLRF   3F
09B7:  MOVLW  7F
09B8:  MOVWF  3E
09B9:  BCF    0A.3
09BA:  CALL   4FC
09BB:  BSF    0A.3
09BC:  BTFSS  03.0
09BD:  GOTO   20D
....................   {  
.................... 	  v = map(y, 0.75, 1.0 , 10.0 , 12.5);  
09BE:  MOVF   27,W
09BF:  MOVWF  45
09C0:  MOVF   26,W
09C1:  MOVWF  44
09C2:  MOVF   25,W
09C3:  MOVWF  43
09C4:  MOVF   24,W
09C5:  MOVWF  42
09C6:  CLRF   49
09C7:  CLRF   48
09C8:  MOVLW  40
09C9:  MOVWF  47
09CA:  MOVLW  7E
09CB:  MOVWF  46
09CC:  CLRF   4D
09CD:  CLRF   4C
09CE:  CLRF   4B
09CF:  MOVLW  7F
09D0:  MOVWF  4A
09D1:  CLRF   51
09D2:  CLRF   50
09D3:  MOVLW  20
09D4:  MOVWF  4F
09D5:  MOVLW  82
09D6:  MOVWF  4E
09D7:  CLRF   55
09D8:  CLRF   54
09D9:  MOVLW  48
09DA:  MOVWF  53
09DB:  MOVLW  82
09DC:  MOVWF  52
09DD:  BCF    0A.3
09DE:  CALL   608
09DF:  BSF    0A.3
09E0:  MOVF   7A,W
09E1:  MOVWF  2B
09E2:  MOVF   79,W
09E3:  MOVWF  2A
09E4:  MOVF   78,W
09E5:  MOVWF  29
09E6:  MOVF   77,W
09E7:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
09E8:  CLRF   3A
09E9:  MOVF   3A,W
09EA:  BCF    0A.3
09EB:  CALL   037
09EC:  BSF    0A.3
09ED:  INCF   3A,F
09EE:  MOVWF  77
09EF:  MOVF   77,W
09F0:  BTFSS  0C.4
09F1:  GOTO   1F0
09F2:  MOVWF  19
09F3:  MOVLW  04
09F4:  SUBWF  3A,W
09F5:  BTFSS  03.2
09F6:  GOTO   1E9
09F7:  MOVF   2B,W
09F8:  MOVWF  3E
09F9:  MOVF   2A,W
09FA:  MOVWF  3D
09FB:  MOVF   29,W
09FC:  MOVWF  3C
09FD:  MOVF   28,W
09FE:  MOVWF  3B
09FF:  CLRF   42
0A00:  CLRF   41
0A01:  MOVLW  01
0A02:  MOVWF  40
0A03:  MOVLW  03
0A04:  MOVWF  3F
0A05:  BCF    0A.3
0A06:  CALL   2E7
0A07:  BSF    0A.3
0A08:  MOVLW  3B
0A09:  BTFSS  0C.4
0A0A:  GOTO   209
0A0B:  MOVWF  19
....................   }   
....................    else if(y > 1.0 && y < 1.25)  
0A0C:  GOTO   454
0A0D:  CLRF   3D
0A0E:  CLRF   3C
0A0F:  CLRF   3B
0A10:  MOVLW  7F
0A11:  MOVWF  3A
0A12:  MOVF   27,W
0A13:  MOVWF  41
0A14:  MOVF   26,W
0A15:  MOVWF  40
0A16:  MOVF   25,W
0A17:  MOVWF  3F
0A18:  MOVF   24,W
0A19:  MOVWF  3E
0A1A:  BCF    0A.3
0A1B:  CALL   4FC
0A1C:  BSF    0A.3
0A1D:  BTFSS  03.0
0A1E:  GOTO   281
0A1F:  MOVF   27,W
0A20:  MOVWF  3D
0A21:  MOVF   26,W
0A22:  MOVWF  3C
0A23:  MOVF   25,W
0A24:  MOVWF  3B
0A25:  MOVF   24,W
0A26:  MOVWF  3A
0A27:  CLRF   41
0A28:  CLRF   40
0A29:  MOVLW  20
0A2A:  MOVWF  3F
0A2B:  MOVLW  7F
0A2C:  MOVWF  3E
0A2D:  BCF    0A.3
0A2E:  CALL   4FC
0A2F:  BSF    0A.3
0A30:  BTFSS  03.0
0A31:  GOTO   281
....................   {  
.................... 	  v = map(y, 1.0,1.25, 12.5,15.0);  
0A32:  MOVF   27,W
0A33:  MOVWF  45
0A34:  MOVF   26,W
0A35:  MOVWF  44
0A36:  MOVF   25,W
0A37:  MOVWF  43
0A38:  MOVF   24,W
0A39:  MOVWF  42
0A3A:  CLRF   49
0A3B:  CLRF   48
0A3C:  CLRF   47
0A3D:  MOVLW  7F
0A3E:  MOVWF  46
0A3F:  CLRF   4D
0A40:  CLRF   4C
0A41:  MOVLW  20
0A42:  MOVWF  4B
0A43:  MOVLW  7F
0A44:  MOVWF  4A
0A45:  CLRF   51
0A46:  CLRF   50
0A47:  MOVLW  48
0A48:  MOVWF  4F
0A49:  MOVLW  82
0A4A:  MOVWF  4E
0A4B:  CLRF   55
0A4C:  CLRF   54
0A4D:  MOVLW  70
0A4E:  MOVWF  53
0A4F:  MOVLW  82
0A50:  MOVWF  52
0A51:  BCF    0A.3
0A52:  CALL   608
0A53:  BSF    0A.3
0A54:  MOVF   7A,W
0A55:  MOVWF  2B
0A56:  MOVF   79,W
0A57:  MOVWF  2A
0A58:  MOVF   78,W
0A59:  MOVWF  29
0A5A:  MOVF   77,W
0A5B:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
0A5C:  CLRF   3A
0A5D:  MOVF   3A,W
0A5E:  BCF    0A.3
0A5F:  CALL   037
0A60:  BSF    0A.3
0A61:  INCF   3A,F
0A62:  MOVWF  77
0A63:  MOVF   77,W
0A64:  BTFSS  0C.4
0A65:  GOTO   264
0A66:  MOVWF  19
0A67:  MOVLW  04
0A68:  SUBWF  3A,W
0A69:  BTFSS  03.2
0A6A:  GOTO   25D
0A6B:  MOVF   2B,W
0A6C:  MOVWF  3E
0A6D:  MOVF   2A,W
0A6E:  MOVWF  3D
0A6F:  MOVF   29,W
0A70:  MOVWF  3C
0A71:  MOVF   28,W
0A72:  MOVWF  3B
0A73:  CLRF   42
0A74:  CLRF   41
0A75:  MOVLW  01
0A76:  MOVWF  40
0A77:  MOVLW  03
0A78:  MOVWF  3F
0A79:  BCF    0A.3
0A7A:  CALL   2E7
0A7B:  BSF    0A.3
0A7C:  MOVLW  3B
0A7D:  BTFSS  0C.4
0A7E:  GOTO   27D
0A7F:  MOVWF  19
....................   }   
....................    else if(y > 1.25 && y < 1.5)  
0A80:  GOTO   454
0A81:  CLRF   3D
0A82:  CLRF   3C
0A83:  MOVLW  20
0A84:  MOVWF  3B
0A85:  MOVLW  7F
0A86:  MOVWF  3A
0A87:  MOVF   27,W
0A88:  MOVWF  41
0A89:  MOVF   26,W
0A8A:  MOVWF  40
0A8B:  MOVF   25,W
0A8C:  MOVWF  3F
0A8D:  MOVF   24,W
0A8E:  MOVWF  3E
0A8F:  BCF    0A.3
0A90:  CALL   4FC
0A91:  BSF    0A.3
0A92:  BTFSS  03.0
0A93:  GOTO   2F7
0A94:  MOVF   27,W
0A95:  MOVWF  3D
0A96:  MOVF   26,W
0A97:  MOVWF  3C
0A98:  MOVF   25,W
0A99:  MOVWF  3B
0A9A:  MOVF   24,W
0A9B:  MOVWF  3A
0A9C:  CLRF   41
0A9D:  CLRF   40
0A9E:  MOVLW  40
0A9F:  MOVWF  3F
0AA0:  MOVLW  7F
0AA1:  MOVWF  3E
0AA2:  BCF    0A.3
0AA3:  CALL   4FC
0AA4:  BSF    0A.3
0AA5:  BTFSS  03.0
0AA6:  GOTO   2F7
....................   {  
.................... 	  v = map(y, 1.25,1.5, 15.0,25.0);  
0AA7:  MOVF   27,W
0AA8:  MOVWF  45
0AA9:  MOVF   26,W
0AAA:  MOVWF  44
0AAB:  MOVF   25,W
0AAC:  MOVWF  43
0AAD:  MOVF   24,W
0AAE:  MOVWF  42
0AAF:  CLRF   49
0AB0:  CLRF   48
0AB1:  MOVLW  20
0AB2:  MOVWF  47
0AB3:  MOVLW  7F
0AB4:  MOVWF  46
0AB5:  CLRF   4D
0AB6:  CLRF   4C
0AB7:  MOVLW  40
0AB8:  MOVWF  4B
0AB9:  MOVLW  7F
0ABA:  MOVWF  4A
0ABB:  CLRF   51
0ABC:  CLRF   50
0ABD:  MOVLW  70
0ABE:  MOVWF  4F
0ABF:  MOVLW  82
0AC0:  MOVWF  4E
0AC1:  CLRF   55
0AC2:  CLRF   54
0AC3:  MOVLW  48
0AC4:  MOVWF  53
0AC5:  MOVLW  83
0AC6:  MOVWF  52
0AC7:  BCF    0A.3
0AC8:  CALL   608
0AC9:  BSF    0A.3
0ACA:  MOVF   7A,W
0ACB:  MOVWF  2B
0ACC:  MOVF   79,W
0ACD:  MOVWF  2A
0ACE:  MOVF   78,W
0ACF:  MOVWF  29
0AD0:  MOVF   77,W
0AD1:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
0AD2:  CLRF   3A
0AD3:  MOVF   3A,W
0AD4:  BCF    0A.3
0AD5:  CALL   037
0AD6:  BSF    0A.3
0AD7:  INCF   3A,F
0AD8:  MOVWF  77
0AD9:  MOVF   77,W
0ADA:  BTFSS  0C.4
0ADB:  GOTO   2DA
0ADC:  MOVWF  19
0ADD:  MOVLW  04
0ADE:  SUBWF  3A,W
0ADF:  BTFSS  03.2
0AE0:  GOTO   2D3
0AE1:  MOVF   2B,W
0AE2:  MOVWF  3E
0AE3:  MOVF   2A,W
0AE4:  MOVWF  3D
0AE5:  MOVF   29,W
0AE6:  MOVWF  3C
0AE7:  MOVF   28,W
0AE8:  MOVWF  3B
0AE9:  CLRF   42
0AEA:  CLRF   41
0AEB:  MOVLW  01
0AEC:  MOVWF  40
0AED:  MOVLW  03
0AEE:  MOVWF  3F
0AEF:  BCF    0A.3
0AF0:  CALL   2E7
0AF1:  BSF    0A.3
0AF2:  MOVLW  3B
0AF3:  BTFSS  0C.4
0AF4:  GOTO   2F3
0AF5:  MOVWF  19
....................   }   
....................    else if(y > 1.5 && y < 1.75)  
0AF6:  GOTO   454
0AF7:  CLRF   3D
0AF8:  CLRF   3C
0AF9:  MOVLW  40
0AFA:  MOVWF  3B
0AFB:  MOVLW  7F
0AFC:  MOVWF  3A
0AFD:  MOVF   27,W
0AFE:  MOVWF  41
0AFF:  MOVF   26,W
0B00:  MOVWF  40
0B01:  MOVF   25,W
0B02:  MOVWF  3F
0B03:  MOVF   24,W
0B04:  MOVWF  3E
0B05:  BCF    0A.3
0B06:  CALL   4FC
0B07:  BSF    0A.3
0B08:  BTFSS  03.0
0B09:  GOTO   36D
0B0A:  MOVF   27,W
0B0B:  MOVWF  3D
0B0C:  MOVF   26,W
0B0D:  MOVWF  3C
0B0E:  MOVF   25,W
0B0F:  MOVWF  3B
0B10:  MOVF   24,W
0B11:  MOVWF  3A
0B12:  CLRF   41
0B13:  CLRF   40
0B14:  MOVLW  60
0B15:  MOVWF  3F
0B16:  MOVLW  7F
0B17:  MOVWF  3E
0B18:  BCF    0A.3
0B19:  CALL   4FC
0B1A:  BSF    0A.3
0B1B:  BTFSS  03.0
0B1C:  GOTO   36D
....................   {  
.................... 	  v = map(y, 1.5, 1.75, 25.0 , 35.0);  
0B1D:  MOVF   27,W
0B1E:  MOVWF  45
0B1F:  MOVF   26,W
0B20:  MOVWF  44
0B21:  MOVF   25,W
0B22:  MOVWF  43
0B23:  MOVF   24,W
0B24:  MOVWF  42
0B25:  CLRF   49
0B26:  CLRF   48
0B27:  MOVLW  40
0B28:  MOVWF  47
0B29:  MOVLW  7F
0B2A:  MOVWF  46
0B2B:  CLRF   4D
0B2C:  CLRF   4C
0B2D:  MOVLW  60
0B2E:  MOVWF  4B
0B2F:  MOVLW  7F
0B30:  MOVWF  4A
0B31:  CLRF   51
0B32:  CLRF   50
0B33:  MOVLW  48
0B34:  MOVWF  4F
0B35:  MOVLW  83
0B36:  MOVWF  4E
0B37:  CLRF   55
0B38:  CLRF   54
0B39:  MOVLW  0C
0B3A:  MOVWF  53
0B3B:  MOVLW  84
0B3C:  MOVWF  52
0B3D:  BCF    0A.3
0B3E:  CALL   608
0B3F:  BSF    0A.3
0B40:  MOVF   7A,W
0B41:  MOVWF  2B
0B42:  MOVF   79,W
0B43:  MOVWF  2A
0B44:  MOVF   78,W
0B45:  MOVWF  29
0B46:  MOVF   77,W
0B47:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
0B48:  CLRF   3A
0B49:  MOVF   3A,W
0B4A:  BCF    0A.3
0B4B:  CALL   037
0B4C:  BSF    0A.3
0B4D:  INCF   3A,F
0B4E:  MOVWF  77
0B4F:  MOVF   77,W
0B50:  BTFSS  0C.4
0B51:  GOTO   350
0B52:  MOVWF  19
0B53:  MOVLW  04
0B54:  SUBWF  3A,W
0B55:  BTFSS  03.2
0B56:  GOTO   349
0B57:  MOVF   2B,W
0B58:  MOVWF  3E
0B59:  MOVF   2A,W
0B5A:  MOVWF  3D
0B5B:  MOVF   29,W
0B5C:  MOVWF  3C
0B5D:  MOVF   28,W
0B5E:  MOVWF  3B
0B5F:  CLRF   42
0B60:  CLRF   41
0B61:  MOVLW  01
0B62:  MOVWF  40
0B63:  MOVLW  03
0B64:  MOVWF  3F
0B65:  BCF    0A.3
0B66:  CALL   2E7
0B67:  BSF    0A.3
0B68:  MOVLW  3B
0B69:  BTFSS  0C.4
0B6A:  GOTO   369
0B6B:  MOVWF  19
....................   }   
....................    else if(y > 1.75 && y < 2.0)  
0B6C:  GOTO   454
0B6D:  CLRF   3D
0B6E:  CLRF   3C
0B6F:  MOVLW  60
0B70:  MOVWF  3B
0B71:  MOVLW  7F
0B72:  MOVWF  3A
0B73:  MOVF   27,W
0B74:  MOVWF  41
0B75:  MOVF   26,W
0B76:  MOVWF  40
0B77:  MOVF   25,W
0B78:  MOVWF  3F
0B79:  MOVF   24,W
0B7A:  MOVWF  3E
0B7B:  BCF    0A.3
0B7C:  CALL   4FC
0B7D:  BSF    0A.3
0B7E:  BTFSS  03.0
0B7F:  GOTO   3E1
0B80:  MOVF   27,W
0B81:  MOVWF  3D
0B82:  MOVF   26,W
0B83:  MOVWF  3C
0B84:  MOVF   25,W
0B85:  MOVWF  3B
0B86:  MOVF   24,W
0B87:  MOVWF  3A
0B88:  CLRF   41
0B89:  CLRF   40
0B8A:  CLRF   3F
0B8B:  MOVLW  80
0B8C:  MOVWF  3E
0B8D:  BCF    0A.3
0B8E:  CALL   4FC
0B8F:  BSF    0A.3
0B90:  BTFSS  03.0
0B91:  GOTO   3E1
....................   {  
.................... 	  v = map(y, 1.75, 2.0, 35.0 , 45.0);  
0B92:  MOVF   27,W
0B93:  MOVWF  45
0B94:  MOVF   26,W
0B95:  MOVWF  44
0B96:  MOVF   25,W
0B97:  MOVWF  43
0B98:  MOVF   24,W
0B99:  MOVWF  42
0B9A:  CLRF   49
0B9B:  CLRF   48
0B9C:  MOVLW  60
0B9D:  MOVWF  47
0B9E:  MOVLW  7F
0B9F:  MOVWF  46
0BA0:  CLRF   4D
0BA1:  CLRF   4C
0BA2:  CLRF   4B
0BA3:  MOVLW  80
0BA4:  MOVWF  4A
0BA5:  CLRF   51
0BA6:  CLRF   50
0BA7:  MOVLW  0C
0BA8:  MOVWF  4F
0BA9:  MOVLW  84
0BAA:  MOVWF  4E
0BAB:  CLRF   55
0BAC:  CLRF   54
0BAD:  MOVLW  34
0BAE:  MOVWF  53
0BAF:  MOVLW  84
0BB0:  MOVWF  52
0BB1:  BCF    0A.3
0BB2:  CALL   608
0BB3:  BSF    0A.3
0BB4:  MOVF   7A,W
0BB5:  MOVWF  2B
0BB6:  MOVF   79,W
0BB7:  MOVWF  2A
0BB8:  MOVF   78,W
0BB9:  MOVWF  29
0BBA:  MOVF   77,W
0BBB:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
0BBC:  CLRF   3A
0BBD:  MOVF   3A,W
0BBE:  BCF    0A.3
0BBF:  CALL   037
0BC0:  BSF    0A.3
0BC1:  INCF   3A,F
0BC2:  MOVWF  77
0BC3:  MOVF   77,W
0BC4:  BTFSS  0C.4
0BC5:  GOTO   3C4
0BC6:  MOVWF  19
0BC7:  MOVLW  04
0BC8:  SUBWF  3A,W
0BC9:  BTFSS  03.2
0BCA:  GOTO   3BD
0BCB:  MOVF   2B,W
0BCC:  MOVWF  3E
0BCD:  MOVF   2A,W
0BCE:  MOVWF  3D
0BCF:  MOVF   29,W
0BD0:  MOVWF  3C
0BD1:  MOVF   28,W
0BD2:  MOVWF  3B
0BD3:  CLRF   42
0BD4:  CLRF   41
0BD5:  MOVLW  01
0BD6:  MOVWF  40
0BD7:  MOVLW  03
0BD8:  MOVWF  3F
0BD9:  BCF    0A.3
0BDA:  CALL   2E7
0BDB:  BSF    0A.3
0BDC:  MOVLW  3B
0BDD:  BTFSS  0C.4
0BDE:  GOTO   3DD
0BDF:  MOVWF  19
....................   }   
....................    else if(y > 2.0 && y < 2.5)  
0BE0:  GOTO   454
0BE1:  CLRF   3D
0BE2:  CLRF   3C
0BE3:  CLRF   3B
0BE4:  MOVLW  80
0BE5:  MOVWF  3A
0BE6:  MOVF   27,W
0BE7:  MOVWF  41
0BE8:  MOVF   26,W
0BE9:  MOVWF  40
0BEA:  MOVF   25,W
0BEB:  MOVWF  3F
0BEC:  MOVF   24,W
0BED:  MOVWF  3E
0BEE:  BCF    0A.3
0BEF:  CALL   4FC
0BF0:  BSF    0A.3
0BF1:  BTFSS  03.0
0BF2:  GOTO   454
0BF3:  MOVF   27,W
0BF4:  MOVWF  3D
0BF5:  MOVF   26,W
0BF6:  MOVWF  3C
0BF7:  MOVF   25,W
0BF8:  MOVWF  3B
0BF9:  MOVF   24,W
0BFA:  MOVWF  3A
0BFB:  CLRF   41
0BFC:  CLRF   40
0BFD:  MOVLW  20
0BFE:  MOVWF  3F
0BFF:  MOVLW  80
0C00:  MOVWF  3E
0C01:  BCF    0A.3
0C02:  CALL   4FC
0C03:  BSF    0A.3
0C04:  BTFSS  03.0
0C05:  GOTO   454
....................   {  
.................... 	  v = map(y, 2.0 , 2.5, 45.0 , 50.0);  
0C06:  MOVF   27,W
0C07:  MOVWF  45
0C08:  MOVF   26,W
0C09:  MOVWF  44
0C0A:  MOVF   25,W
0C0B:  MOVWF  43
0C0C:  MOVF   24,W
0C0D:  MOVWF  42
0C0E:  CLRF   49
0C0F:  CLRF   48
0C10:  CLRF   47
0C11:  MOVLW  80
0C12:  MOVWF  46
0C13:  CLRF   4D
0C14:  CLRF   4C
0C15:  MOVLW  20
0C16:  MOVWF  4B
0C17:  MOVLW  80
0C18:  MOVWF  4A
0C19:  CLRF   51
0C1A:  CLRF   50
0C1B:  MOVLW  34
0C1C:  MOVWF  4F
0C1D:  MOVLW  84
0C1E:  MOVWF  4E
0C1F:  CLRF   55
0C20:  CLRF   54
0C21:  MOVLW  48
0C22:  MOVWF  53
0C23:  MOVLW  84
0C24:  MOVWF  52
0C25:  BCF    0A.3
0C26:  CALL   608
0C27:  BSF    0A.3
0C28:  MOVF   7A,W
0C29:  MOVWF  2B
0C2A:  MOVF   79,W
0C2B:  MOVWF  2A
0C2C:  MOVF   78,W
0C2D:  MOVWF  29
0C2E:  MOVF   77,W
0C2F:  MOVWF  28
....................       printf("VWC;%3.3f;",v);   
0C30:  CLRF   3A
0C31:  MOVF   3A,W
0C32:  BCF    0A.3
0C33:  CALL   037
0C34:  BSF    0A.3
0C35:  INCF   3A,F
0C36:  MOVWF  77
0C37:  MOVF   77,W
0C38:  BTFSS  0C.4
0C39:  GOTO   438
0C3A:  MOVWF  19
0C3B:  MOVLW  04
0C3C:  SUBWF  3A,W
0C3D:  BTFSS  03.2
0C3E:  GOTO   431
0C3F:  MOVF   2B,W
0C40:  MOVWF  3E
0C41:  MOVF   2A,W
0C42:  MOVWF  3D
0C43:  MOVF   29,W
0C44:  MOVWF  3C
0C45:  MOVF   28,W
0C46:  MOVWF  3B
0C47:  CLRF   42
0C48:  CLRF   41
0C49:  MOVLW  01
0C4A:  MOVWF  40
0C4B:  MOVLW  03
0C4C:  MOVWF  3F
0C4D:  BCF    0A.3
0C4E:  CALL   2E7
0C4F:  BSF    0A.3
0C50:  MOVLW  3B
0C51:  BTFSS  0C.4
0C52:  GOTO   451
0C53:  MOVWF  19
....................   }   
....................    
.................... }  
0C54:  BSF    0A.3
0C55:  BCF    0A.4
0C56:  GOTO   4C1 (RETURN)
....................    
....................  double map(double value, float x_min, float x_max, float y_min, float y_max)     
.................... {                                 
....................     return (y_min + (((y_max - y_min)/(x_max - x_min)) * (value - x_min)));  
*
0608:  BSF    03.1
0609:  MOVF   55,W
060A:  MOVWF  71
060B:  MOVF   54,W
060C:  MOVWF  70
060D:  MOVF   53,W
060E:  MOVWF  6F
060F:  MOVF   52,W
0610:  MOVWF  6E
0611:  MOVF   51,W
0612:  MOVWF  75
0613:  MOVF   50,W
0614:  MOVWF  74
0615:  MOVF   4F,W
0616:  MOVWF  73
0617:  MOVF   4E,W
0618:  MOVWF  72
0619:  CALL   16D
061A:  MOVF   77,W
061B:  MOVWF  56
061C:  MOVF   78,W
061D:  MOVWF  57
061E:  MOVF   79,W
061F:  MOVWF  58
0620:  MOVF   7A,W
0621:  MOVWF  59
0622:  BSF    03.1
0623:  MOVF   4D,W
0624:  MOVWF  71
0625:  MOVF   4C,W
0626:  MOVWF  70
0627:  MOVF   4B,W
0628:  MOVWF  6F
0629:  MOVF   4A,W
062A:  MOVWF  6E
062B:  MOVF   49,W
062C:  MOVWF  75
062D:  MOVF   48,W
062E:  MOVWF  74
062F:  MOVF   47,W
0630:  MOVWF  73
0631:  MOVF   46,W
0632:  MOVWF  72
0633:  CALL   16D
0634:  MOVF   59,W
0635:  MOVWF  5D
0636:  MOVF   58,W
0637:  MOVWF  5C
0638:  MOVF   57,W
0639:  MOVWF  5B
063A:  MOVF   56,W
063B:  MOVWF  5A
063C:  MOVF   7A,W
063D:  MOVWF  61
063E:  MOVF   79,W
063F:  MOVWF  60
0640:  MOVF   78,W
0641:  MOVWF  5F
0642:  MOVF   77,W
0643:  MOVWF  5E
0644:  GOTO   53B
0645:  MOVF   77,W
0646:  MOVWF  5A
0647:  MOVF   78,W
0648:  MOVWF  5B
0649:  MOVF   79,W
064A:  MOVWF  5C
064B:  MOVF   7A,W
064C:  MOVWF  5D
064D:  BSF    03.1
064E:  MOVF   45,W
064F:  MOVWF  71
0650:  MOVF   44,W
0651:  MOVWF  70
0652:  MOVF   43,W
0653:  MOVWF  6F
0654:  MOVF   42,W
0655:  MOVWF  6E
0656:  MOVF   49,W
0657:  MOVWF  75
0658:  MOVF   48,W
0659:  MOVWF  74
065A:  MOVF   47,W
065B:  MOVWF  73
065C:  MOVF   46,W
065D:  MOVWF  72
065E:  CALL   16D
065F:  MOVF   5D,W
0660:  MOVWF  6D
0661:  MOVF   5C,W
0662:  MOVWF  6C
0663:  MOVF   5B,W
0664:  MOVWF  6B
0665:  MOVF   5A,W
0666:  MOVWF  6A
0667:  MOVF   7A,W
0668:  MOVWF  71
0669:  MOVF   79,W
066A:  MOVWF  70
066B:  MOVF   78,W
066C:  MOVWF  6F
066D:  MOVF   77,W
066E:  MOVWF  6E
066F:  CALL   486
0670:  BCF    03.1
0671:  MOVF   51,W
0672:  MOVWF  71
0673:  MOVF   50,W
0674:  MOVWF  70
0675:  MOVF   4F,W
0676:  MOVWF  6F
0677:  MOVF   4E,W
0678:  MOVWF  6E
0679:  MOVF   7A,W
067A:  MOVWF  75
067B:  MOVF   79,W
067C:  MOVWF  74
067D:  MOVF   78,W
067E:  MOVWF  73
067F:  MOVF   77,W
0680:  MOVWF  72
0681:  CALL   16D
.................... }  
0682:  RETLW  00

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
